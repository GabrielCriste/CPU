pages = [{"l":"index.html#","e":false,"i":"","n":"docs","t":"docs","d":"","k":"static"},
{"l":"torch.html#","e":false,"i":"","n":"torch","t":"torch","d":"","k":"package"},
{"l":"https://storch.dev/api/torch.html#ComplexNN=|[|[Complex32,Complex64],Complex128]","e":true,"i":"","n":"ComplexNN","t":"ComplexNN = Complex32 | Complex64 | Complex128","d":"torch","k":"type"},
{"l":"https://storch.dev/api/torch.html#ComplexTensor=|[|[Complex32Tensor,Complex64Tensor],Complex128Tensor]","e":true,"i":"","n":"ComplexTensor","t":"ComplexTensor = Complex32Tensor | Complex64Tensor | Complex128Tensor","d":"torch","k":"type"},
{"l":"https://storch.dev/api/torch.html#DTypeOrDeriveArange[T<:|[DType,Derive],Start<:ScalaType,End<:ScalaType,Step<:ScalaType]<:DType=Tmatch{\ncaseDerive=>DerivedArangeType[Start,End,Step]\ncaseT=>TensorType[T]\n}","e":true,"i":"","n":"DTypeOrDeriveArange","t":"DTypeOrDeriveArange[T <: DType | Derive, Start <: ScalaType, End <: ScalaType, Step <: ScalaType] = T match {\n  case Derive => DerivedArangeType[Start, End, Step]\n  case T => TensorType[T]\n}","d":"torch","k":"type"},
{"l":"https://storch.dev/api/torch.html#DTypeOrDeriveFromScalar[T<:|[DType,Derive],U<:ScalaType]<:DType=Tmatch{\ncaseDerive=>ScalaToDType[U]\ncaseT=>TensorType[T]\n}","e":true,"i":"","n":"DTypeOrDeriveFromScalar","t":"DTypeOrDeriveFromScalar[T <: DType | Derive, U <: ScalaType] = T match {\n  case Derive => ScalaToDType[U]\n  case T => TensorType[T]\n}","d":"torch","k":"type"},
{"l":"https://storch.dev/api/torch.html#DTypeOrDeriveFromTensor[D1<:DType,U<:|[DType,Derive]]<:DType=Umatch{\ncaseDerive=>D1\ncaseU=>TensorType[U]\n}","e":true,"i":"","n":"DTypeOrDeriveFromTensor","t":"DTypeOrDeriveFromTensor[D1 <: DType, U <: DType | Derive] = U match {\n  case Derive => D1\n  case U => TensorType[U]\n}","d":"torch","k":"type"},
{"l":"https://storch.dev/api/torch.html#DTypeToScala[T<:DType]<:ScalaType=Tmatch{\ncaseUInt8=>UByte\ncaseInt8=>Byte\ncaseInt16=>Short\ncaseInt32=>Int\ncaseInt64=>Long\ncaseFloat16=>Float\ncaseFloat32=>Float\ncaseFloat64=>Double\ncaseComplex32=>Complex[Float]\ncaseComplex64=>Complex[Float]\ncaseComplex128=>Complex[Double]\ncaseBool=>Boolean\ncaseAny=>ScalaType\n}","e":true,"i":"","n":"DTypeToScala","t":"DTypeToScala[T <: DType] = T match {\n  case UInt8 => UByte\n  case Int8 => Byte\n  case Int16 => Short\n  case Int32 => Int\n  case Int64 => Long\n  case Float16 => Float\n  case Float32 => Float\n  case Float64 => Double\n  case Complex32 => Complex[Float]\n  case Complex64 => Complex[Float]\n  case Complex128 => Complex[Double]\n  case Bool => Boolean\n  case Any => ScalaType\n}","d":"torch","k":"type"},
{"l":"https://storch.dev/api/torch.html#DerivedArangeType[Start<:ScalaType,End<:ScalaType,Step<:ScalaType]=PromotedDType[ScalaToDType[Start],PromotedDType[ScalaToDType[End],ScalaToDType[Step]]]","e":true,"i":"","n":"DerivedArangeType","t":"DerivedArangeType[Start <: ScalaType, End <: ScalaType, Step <: ScalaType] = PromotedDType[ScalaToDType[Start], PromotedDType[ScalaToDType[End], ScalaToDType[Step]]]","d":"torch","k":"type"},
{"l":"https://storch.dev/api/torch.html#Div[T<:DType,U<:DType]<:DType=Tuple2[T,U]match{\ncaseTuple2[|[Bool,IntNN],|[Bool,IntNN]]=>Float32\ncaseAny=>Promoted[T,U]\n}","e":true,"i":"","n":"Div","t":"Div[T <: DType, U <: DType] = (T, U) match {\n  case (Bool | IntNN, Bool | IntNN) => Float32\n  case Any => Promoted[T, U]\n}","d":"torch","k":"type"},
{"l":"https://storch.dev/api/torch.html#FloatNN=|[|[|[Float16,Float32],Float64],BFloat16]","e":true,"i":"","n":"FloatNN","t":"FloatNN = Float16 | Float32 | Float64 | BFloat16","d":"torch","k":"type"},
{"l":"https://storch.dev/api/torch.html#IntNN=|[|[|[|[Int8,UInt8],Int16],Int32],Int64]","e":true,"i":"","n":"IntNN","t":"IntNN = Int8 | UInt8 | Int16 | Int32 | Int64","d":"torch","k":"type"},
{"l":"https://storch.dev/api/torch.html#IntTensor=|[|[|[|[UInt8Tensor,Int8Tensor],Int16Tensor],Int32Tensor],Int64Tensor]","e":true,"i":"","n":"IntTensor","t":"IntTensor = UInt8Tensor | Int8Tensor | Int16Tensor | Int32Tensor | Int64Tensor","d":"torch","k":"type"},
{"l":"https://storch.dev/api/torch.html#Promoted[T<:DType,U<:DType]<:DType=Tuple2[T,U]match{\ncaseTuple2[T,T]=>T\ncaseTuple2[U,U]=>U\ncase|[Tuple2[Undefined,U],Tuple2[T,Undefined]]=>Undefined\ncaseTuple2[Bool,U]=>U\ncaseTuple2[T,Bool]=>T\ncase|[Tuple2[Int8,UInt8],Tuple2[UInt8,Int8]]=>Int16\ncaseTuple2[UInt8,U]=>U\ncaseTuple2[T,UInt8]=>T\ncaseTuple2[Int8,U]=>U\ncaseTuple2[T,Int8]=>T\ncaseTuple2[Int16,U]=>U\ncaseTuple2[T,Int16]=>T\ncaseTuple2[Int32,U]=>U\ncaseTuple2[T,Int32]=>T\ncaseTuple2[Int64,U]=>U\ncaseTuple2[T,Int64]=>T\ncase|[Tuple2[Float16,BFloat16],Tuple2[BFloat16,Float16]]=>Float32\ncaseTuple2[Float16,U]=>U\ncaseTuple2[T,Float16]=>T\ncaseTuple2[Float32,U]=>U\ncaseTuple2[T,Float32]=>T\ncaseTuple2[Float64,U]=>U\ncaseTuple2[T,Float64]=>T\ncaseTuple2[Complex32,U]=>U\ncaseTuple2[T,Complex32]=>T\ncaseTuple2[Complex64,U]=>U\ncaseTuple2[T,Complex64]=>T\ncaseTuple2[Complex128,U]=>U\ncaseTuple2[T,Complex128]=>T\ncaseAny=>DType\n}","e":true,"i":"","n":"Promoted","t":"Promoted[T <: DType, U <: DType] = (T, U) match {\n  case (T, T) => T\n  case (U, U) => U\n  case (Undefined, U) | (T, Undefined) => Undefined\n  case (Bool, U) => U\n  case (T, Bool) => T\n  case (Int8, UInt8) | (UInt8, Int8) => Int16\n  case (UInt8, U) => U\n  case (T, UInt8) => T\n  case (Int8, U) => U\n  case (T, Int8) => T\n  case (Int16, U) => U\n  case (T, Int16) => T\n  case (Int32, U) => U\n  case (T, Int32) => T\n  case (Int64, U) => U\n  case (T, Int64) => T\n  case (Float16, BFloat16) | (BFloat16, Float16) => Float32\n  case (Float16, U) => U\n  case (T, Float16) => T\n  case (Float32, U) => U\n  case (T, Float32) => T\n  case (Float64, U) => U\n  case (T, Float64) => T\n  case (Complex32, U) => U\n  case (T, Complex32) => T\n  case (Complex64, U) => U\n  case (T, Complex64) => T\n  case (Complex128, U) => U\n  case (T, Complex128) => T\n  case Any => DType\n}","d":"torch","k":"type"},
{"l":"https://storch.dev/api/torch.html#PromotedDType[A<:DType,B<:DType]<:|[|[Float32,Int32],Int64]=Tuple2[A,B]match{\ncaseTuple2[Float64,B]=>Float32\ncaseTuple2[A,Float64]=>Float32\ncaseTuple2[Float32,B]=>Float32\ncaseTuple2[A,Float32]=>Float32\ncaseTuple2[Int64,B]=>Int64\ncaseTuple2[A,Int64]=>Int64\ncaseTuple2[Int32,B]=>Int32\ncaseTuple2[A,Int32]=>Int32\ncaseAny=>Int64\n}","e":true,"i":"","n":"PromotedDType","t":"PromotedDType[A <: DType, B <: DType] = (A, B) match {\n  case (Float64, B) => Float32\n  case (A, Float64) => Float32\n  case (Float32, B) => Float32\n  case (A, Float32) => Float32\n  case (Int64, B) => Int64\n  case (A, Int64) => Int64\n  case (Int32, B) => Int32\n  case (A, Int32) => Int32\n  case Any => Int64\n}","d":"torch","k":"type"},
{"l":"https://storch.dev/api/torch.html#ScalaToDType[S<:ScalaType]<:DType=Smatch{\ncaseUByte=>UInt8\ncaseByte=>Int8\ncaseShort=>Int16\ncaseInt=>Int32\ncaseLong=>Int64\ncaseFloat=>Float32\ncaseDouble=>Float64\ncaseBoolean=>Bool\ncaseComplex[Float]=>Complex64\ncaseComplex[Double]=>Complex128\n}","e":true,"i":"","n":"ScalaToDType","t":"ScalaToDType[S <: ScalaType] = S match {\n  case UByte => UInt8\n  case Byte => Int8\n  case Short => Int16\n  case Int => Int32\n  case Long => Int64\n  case Float => Float32\n  case Double => Float64\n  case Boolean => Bool\n  case Complex[Float] => Complex64\n  case Complex[Double] => Complex128\n}","d":"torch","k":"type"},
{"l":"https://storch.dev/api/torch.html#ScalaType=|[|[|[|[|[|[|[|[|[Boolean,Byte],UByte],Short],Int],Long],Float],Double],Complex[Float]],Complex[Double]]","e":true,"i":"","n":"ScalaType","t":"ScalaType = Boolean | Byte | UByte | Short | Int | Long | Float | Double | Complex[Float] | Complex[Double]","d":"torch","k":"type"},
{"l":"https://storch.dev/api/torch.html#Sum[D<:DType]<:DType=Dmatch{\ncase|[Bool,IntNN]=>Int64\ncaseD=>D\n}","e":true,"i":"","n":"Sum","t":"Sum[D <: DType] = D match {\n  case Bool | IntNN => Int64\n  case D => D\n}","d":"torch","k":"type"},
{"l":"https://storch.dev/api/torch.html#TensorType[T]<:DType=Tmatch{\ncaseUInt8=>UInt8\ncaseInt8=>Int8\ncaseInt16=>Int16\ncaseInt32=>Int32\ncaseInt64=>Int64\ncaseFloat32=>Float32\ncaseFloat64=>Float64\ncaseComplex32=>Complex32\ncaseComplex64=>Complex64\ncaseComplex128=>Complex128\ncaseBool=>Bool\ncaseQInt8=>QInt8\ncaseQUInt8=>QUInt8\ncaseQInt32=>QInt32\ncaseBFloat16=>BFloat16\ncaseQUInt4x2=>QUInt4x2\ncaseQUInt2x4=>QUInt2x4\ncaseFloat16=>Float16\ncaseUndefined=>Undefined\ncaseNumOptions=>NumOptions\ncaseDType=>DType\n}","e":true,"i":"","n":"TensorType","t":"TensorType[T] = T match {\n  case UInt8 => UInt8\n  case Int8 => Int8\n  case Int16 => Int16\n  case Int32 => Int32\n  case Int64 => Int64\n  case Float32 => Float32\n  case Float64 => Float64\n  case Complex32 => Complex32\n  case Complex64 => Complex64\n  case Complex128 => Complex128\n  case Bool => Bool\n  case QInt8 => QInt8\n  case QUInt8 => QUInt8\n  case QInt32 => QInt32\n  case BFloat16 => BFloat16\n  case QUInt4x2 => QUInt4x2\n  case QUInt2x4 => QUInt2x4\n  case Float16 => Float16\n  case Undefined => Undefined\n  case NumOptions => NumOptions\n  case DType => DType\n}","d":"torch","k":"type"},
{"l":"https://storch.dev/api/torch.html#arange[D<:|[DType,Derive],Start<:ScalaType,End<:ScalaType,Step<:ScalaType](start:Start,end:End,step:Step,dtype:D,layout:Layout,device:Device,requiresGrad:Boolean):Tensor[DTypeOrDeriveArange[D,Start,End,Step]]={\nvalderivedDType:DType=dtypematch{\ncase_:Derive=>\nderivedArangeType[Start,End,Step](start,end,step)\ncaset:DType=>\n(t:D&DType)\n}\nTensor.apply[DTypeOrDeriveArange[D,Start,End,Step]](torch.torch_arange(toScalar(start),toScalar(end),toScalar(step),NativeConverters.tensorOptions(derivedDType,layout,device,requiresGrad,NativeConverters.tensorOptions$default$5)))\n}","e":true,"i":"","n":"arange","t":"arange[D <: DType | Derive, Start <: ScalaType, End <: ScalaType, Step <: ScalaType](start: Start, end: End, step: Step, dtype: D, layout: Layout, device: Device, requiresGrad: Boolean): Tensor[DTypeOrDeriveArange[D, Start, End, Step]]","d":"torch","k":"def"},
{"l":"https://storch.dev/api/torch.html#bfloat16:BFloat16=DType.bfloat16","e":true,"i":"","n":"bfloat16","t":"bfloat16: BFloat16","d":"torch","k":"val"},
{"l":"https://storch.dev/api/torch.html#bool:Bool=DType.bool","e":true,"i":"","n":"bool","t":"bool: Bool","d":"torch","k":"val"},
{"l":"https://storch.dev/api/torch.html#cat[D<:DType](tensors:Seq[Tensor[D]],dim:Int):Tensor[D]=Tensor.apply[D](torch.cat(newTensorArrayRef(newTensorVector(tensors.map[Tensor](((_$8:Tensor[D])=>_$8.native)):_*)),dim.toLong))","e":true,"i":"","n":"cat","t":"cat[D <: DType](tensors: Seq[Tensor[D]], dim: Int): Tensor[D]","d":"torch","k":"def"},
{"l":"https://storch.dev/api/torch.html#complex128:Complex128=DType.complex128","e":true,"i":"","n":"complex128","t":"complex128: Complex128","d":"torch","k":"val"},
{"l":"https://storch.dev/api/torch.html#complex32:Complex32=DType.complex32","e":true,"i":"","n":"complex32","t":"complex32: Complex32","d":"torch","k":"val"},
{"l":"https://storch.dev/api/torch.html#complex64:Complex64=DType.complex64","e":true,"i":"","n":"complex64","t":"complex64: Complex64","d":"torch","k":"val"},
{"l":"https://storch.dev/api/torch.html#deriveDType[T<:DType]:DType=erasedValue[T]match{\ncase_:UInt8=>\nuint8\ncase_:Int8=>\nint8\ncase_:Int16=>\nint16\ncase_:Int32=>\nint32\ncase_:Int64=>\nint64\ncase_:Float32=>\nfloat32\ncase_:Float64=>\nfloat64\ncase_:Complex32=>\ncomplex32\ncase_:Complex64=>\ncomplex64\ncase_:Complex128=>\ncomplex128\ncase_:Bool=>\nbool\ncase_:QInt8=>\nqint8\ncase_:QUInt8=>\nquint8\ncase_:QInt32=>\nqint32\ncase_:BFloat16=>\nbfloat16\ncase_:QUInt4x2=>\nquint4x2\ncase_:QUInt2x4=>\nquint2x4\ncase_:Float16=>\nfloat16\ncase_:Undefined=>\nundefined\ncase_:NumOptions=>\nnumoptions\ncase_=>\nfloat32\n}","e":true,"i":"","n":"deriveDType","t":"deriveDType[T <: DType]: DType","d":"torch","k":"def"},
{"l":"https://storch.dev/api/torch.html#empty[D<:DType](size:Seq[Int],dtype:D,layout:Layout,device:Device,requiresGrad:Boolean,pinMemory:Boolean,memoryFormat:MemoryFormat):Tensor[D]=Tensor.apply[D](torch.torch_empty(intArrayOps(size.toArray[Int](ClassTag.apply[Int](classOf[Int]))).map[Long](((_$4:Int)=>_$4.toLong))(ClassTag.apply[Long](classOf[Long])),NativeConverters.tensorOptions(dtype,layout,device,requiresGrad,NativeConverters.tensorOptions$default$5).pinned_memory(newBoolOptional(pinMemory)),newMemoryFormatOptional(memoryFormat.toNative)))","e":true,"i":"","n":"empty","t":"empty[D <: DType](size: Seq[Int], dtype: D, layout: Layout, device: Device, requiresGrad: Boolean, pinMemory: Boolean, memoryFormat: MemoryFormat): Tensor[D]","d":"torch","k":"def"},
{"l":"https://storch.dev/api/torch.html#emptyLike[D<:DType,D2<:|[DType,Derive]](input:Tensor[D],dtype:D2,layout:|[Layout,Derive],device:|[Device,Derive],requiresGrad:Boolean,memoryFormat:MemoryFormat):Tensor[DTypeOrDeriveFromTensor[D,D2]]=xLike[D,D2](input,dtype,layout,device,requiresGrad,memoryFormat,((x$0:Tensor,x$1:TensorOptions,x$2:MemoryFormatOptional)=>torch.torch_empty_like(x$0,x$1,x$2)))","e":true,"i":"","n":"emptyLike","t":"emptyLike[D <: DType, D2 <: DType | Derive](input: Tensor[D], dtype: D2, layout: Layout | Derive, device: Device | Derive, requiresGrad: Boolean, memoryFormat: MemoryFormat): Tensor[DTypeOrDeriveFromTensor[D, D2]]","d":"torch","k":"def"},
{"l":"https://storch.dev/api/torch.html#eye[D<:DType](n:Int,m:Option[Int],dtype:D,layout:Layout,device:Device,requiresGrad:Boolean):Tensor[D]=Tensor.apply[D](torch.torch_eye(int2long(n),NativeConverters.tensorOptions(dtype,layout,device,requiresGrad,NativeConverters.tensorOptions$default$5)))","e":true,"i":"","n":"eye","t":"eye[D <: DType](n: Int, m: Option[Int], dtype: D, layout: Layout, device: Device, requiresGrad: Boolean): Tensor[D]","d":"torch","k":"def"},
{"l":"https://storch.dev/api/torch.html#float16:Float16=DType.float16","e":true,"i":"","n":"float16","t":"float16: Float16","d":"torch","k":"val"},
{"l":"https://storch.dev/api/torch.html#float32:Float32=DType.float32","e":true,"i":"","n":"float32","t":"float32: Float32","d":"torch","k":"val"},
{"l":"https://storch.dev/api/torch.html#float64:Float64=DType.float64","e":true,"i":"","n":"float64","t":"float64: Float64","d":"torch","k":"val"},
{"l":"https://storch.dev/api/torch.html#full[D<:|[DType,Derive],U<:ScalaType](size:Seq[Int],fillValue:U,dtype:D,layout:Layout,device:Device,requiresGrad:Boolean):Tensor[DTypeOrDeriveFromScalar[D,U]]={\nvalderivedDType:DType=dtypematch{\ncase_:Derive=>\nscalaToDType[U](fillValue)\ncaset:DType=>\n(t:D&DType)\n}\nTensor.apply[DTypeOrDeriveFromScalar[D,U]](torch.torch_full(intArrayOps(size.toArray[Int](ClassTag.apply[Int](classOf[Int]))).map[Long](((_$5:Int)=>_$5.toLong))(ClassTag.apply[Long](classOf[Long])),toScalar(fillValue),NativeConverters.tensorOptions(derivedDType,layout,device,requiresGrad,NativeConverters.tensorOptions$default$5)))\n}","e":true,"i":"","n":"full","t":"full[D <: DType | Derive, U <: ScalaType](size: Seq[Int], fillValue: U, dtype: D, layout: Layout, device: Device, requiresGrad: Boolean): Tensor[DTypeOrDeriveFromScalar[D, U]]","d":"torch","k":"def"},
{"l":"https://storch.dev/api/torch.html#int16:Int16=DType.int16","e":true,"i":"","n":"int16","t":"int16: Int16","d":"torch","k":"val"},
{"l":"https://storch.dev/api/torch.html#int32:Int32=DType.int32","e":true,"i":"","n":"int32","t":"int32: Int32","d":"torch","k":"val"},
{"l":"https://storch.dev/api/torch.html#int64:Int64=DType.int64","e":true,"i":"","n":"int64","t":"int64: Int64","d":"torch","k":"val"},
{"l":"https://storch.dev/api/torch.html#int8:Int8=DType.int8","e":true,"i":"","n":"int8","t":"int8: Int8","d":"torch","k":"val"},
{"l":"https://storch.dev/api/torch.html#linspace[D<:DType](start:Double,end:Double,steps:Long,dtype:D,layout:Layout,device:Device,requiresGrad:Boolean):Tensor[D]=Tensor.apply[D](torch.torch_linspace(newScalar(start),newScalar(end),steps,NativeConverters.tensorOptions(dtype,layout,device,requiresGrad,NativeConverters.tensorOptions$default$5)))","e":true,"i":"","n":"linspace","t":"linspace[D <: DType](start: Double, end: Double, steps: Long, dtype: D, layout: Layout, device: Device, requiresGrad: Boolean): Tensor[D]","d":"torch","k":"def"},
{"l":"https://storch.dev/api/torch.html#logspace[D<:DType](start:Double,end:Float,steps:Long,base:Double,dtype:D,layout:Layout,device:Device,requiresGrad:Boolean):Tensor[Nothing]=Tensor.apply[Nothing](torch.torch_logspace(newScalar(start),newScalar(end),steps,base,NativeConverters.tensorOptions(dtype,layout,device,requiresGrad,NativeConverters.tensorOptions$default$5)))","e":true,"i":"","n":"logspace","t":"logspace[D <: DType](start: Double, end: Float, steps: Long, base: Double, dtype: D, layout: Layout, device: Device, requiresGrad: Boolean): Tensor[Nothing]","d":"torch","k":"def"},
{"l":"https://storch.dev/api/torch.html#manualSeed(seed:Long):Unit=torch.manual_seed(seed)","e":true,"i":"","n":"manualSeed","t":"manualSeed(seed: Long): Unit","d":"torch","k":"def"},
{"l":"https://storch.dev/api/torch.html#matmul[D1<:DType,D2<:DType](t1:Tensor[D1],t2:Tensor[D2]):Tensor[Promoted[D1,D2]]=t1.matmul[D2](t2)","e":true,"i":"","n":"matmul","t":"matmul[D1 <: DType, D2 <: DType](t1: Tensor[D1], t2: Tensor[D2]): Tensor[Promoted[D1, D2]]","d":"torch","k":"def"},
{"l":"https://storch.dev/api/torch.html#noGrad[A](op:=>A):A={\nimportorg.bytedeco.pytorch.{NoGradGuard}\nUsing.resource[NoGradGuard,A](newNoGradGuard())(((_$10:NoGradGuard)=>op))(AutoCloseableIsReleasable)\n}","e":true,"i":"","n":"noGrad","t":"noGrad[A](op: => A): A","d":"torch","k":"def"},
{"l":"https://storch.dev/api/torch.html#numoptions:NumOptions=DType.numoptions","e":true,"i":"","n":"numoptions","t":"numoptions: NumOptions","d":"torch","k":"val"},
{"l":"https://storch.dev/api/torch.html#ones[D<:DType](size:|[Seq[Int],Int],dtype:D,layout:Layout,device:Device,requiresGrad:Boolean):Tensor[D]={\nvalnativeSize:Array[Long]=sizematch{\ncases:Seq[Int]=>\ns.map[Long](((_$3:Int)=>_$3.toLong)).toArray[Long](ClassTag.apply[Long](classOf[Long]))\ncases:Int=>\nArray.apply(`s₂`.toLong)\n}\nTensor.apply[D](torch.torch_ones(nativeSize,NativeConverters.tensorOptions(dtype,layout,device,requiresGrad,NativeConverters.tensorOptions$default$5)))\n}","e":true,"i":"","n":"ones","t":"ones[D <: DType](size: Seq[Int] | Int, dtype: D, layout: Layout, device: Device, requiresGrad: Boolean): Tensor[D]","d":"torch","k":"def"},
{"l":"https://storch.dev/api/torch.html#onesLike[D<:DType,D2<:|[DType,Derive]](input:Tensor[D],dtype:D2,layout:|[Layout,Derive],device:|[Device,Derive],requiresGrad:Boolean,memoryFormat:MemoryFormat):Tensor[DTypeOrDeriveFromTensor[D,D2]]=xLike[D,D2](input,dtype,layout,device,requiresGrad,memoryFormat,((x$0:Tensor,x$1:TensorOptions,x$2:MemoryFormatOptional)=>torch.torch_ones_like(x$0,x$1,x$2)))","e":true,"i":"","n":"onesLike","t":"onesLike[D <: DType, D2 <: DType | Derive](input: Tensor[D], dtype: D2, layout: Layout | Derive, device: Device | Derive, requiresGrad: Boolean, memoryFormat: MemoryFormat): Tensor[DTypeOrDeriveFromTensor[D, D2]]","d":"torch","k":"def"},
{"l":"https://storch.dev/api/torch.html#pickleLoad(data:Array[Byte]):SeqMap[String,Tensor[DType]]={\nvaldict:GenericDict=torch.pickle_load(data).toGenericDict()\nvalbuffer:Array[Tuple2[IValue,IValue]]=newArray[Tuple2[IValue,IValue]](dict.size().toInt)\nvalnativeIt:GenericDictIterator=dict.begin()\nintWrapper(0).until(refArrayOps[Tuple2[IValue,IValue]](buffer).size).foreach[GenericDictIterator](((i:Int)=>{\nbuffer.update(i,Tuple2.apply[IValue,IValue](nativeIt.access().key(),nativeIt.access().value()))\nnativeIt.increment()\n}))\nVectorMap.from[String,Tensor[DType]](wrapRefArray[Tuple2[String,Tensor[DType]]](refArrayOps[Tuple2[IValue,IValue]](buffer).map[Tuple2[String,Tensor[DType]]](((x$1:Tuple2[IValue,IValue])=>{\nvalkey:IValue=x$1._1\nvalvalue:IValue=x$1._2\nTuple2.apply[String,Tensor[DType]](key.toStringRef().getString(),Tensor.apply[DType](value.toTensor().clone()))\n}))(ClassTag.apply[Tuple2[String,Tensor[DType]]](classOf[Tuple2]))))\n}","e":true,"i":"","n":"pickleLoad","t":"pickleLoad(data: Array[Byte]): SeqMap[String, Tensor[DType]]","d":"torch","k":"def"},
{"l":"https://storch.dev/api/torch.html#pickleLoad(path:Path):Map[String,Tensor[DType]]={\nvaldata:Array[Byte]=Files.readAllBytes(path)\npickleLoad(data)\n}","e":true,"i":"","n":"pickleLoad","t":"pickleLoad(path: Path): Map[String, Tensor[DType]]","d":"torch","k":"def"},
{"l":"https://storch.dev/api/torch.html#pickle_save(tensors:SeqMap[String,Tensor[DType]]):SeqMap[IValue,IValue]=tensors.map[IValue,IValue](((x$1:Tuple2[String,Tensor[DType]])=>{\nvalk:String=x$1._1\nvalv:Tensor[DType]=x$1._2\nTuple2.apply[IValue,IValue](newIValue(k),newIValue(v.native))\n}))","e":true,"i":"","n":"pickle_save","t":"pickle_save(tensors: SeqMap[String, Tensor[DType]]): SeqMap[IValue, IValue]","d":"torch","k":"def"},
{"l":"https://storch.dev/api/torch.html#qint32:QInt32=DType.qint32","e":true,"i":"","n":"qint32","t":"qint32: QInt32","d":"torch","k":"val"},
{"l":"https://storch.dev/api/torch.html#qint8:QInt8=DType.qint8","e":true,"i":"","n":"qint8","t":"qint8: QInt8","d":"torch","k":"val"},
{"l":"https://storch.dev/api/torch.html#quint2x4:QUInt2x4=DType.quint2x4","e":true,"i":"","n":"quint2x4","t":"quint2x4: QUInt2x4","d":"torch","k":"val"},
{"l":"https://storch.dev/api/torch.html#quint4x2:QUInt4x2=DType.quint4x2","e":true,"i":"","n":"quint4x2","t":"quint4x2: QUInt4x2","d":"torch","k":"val"},
{"l":"https://storch.dev/api/torch.html#quint8:QUInt8=DType.quint8","e":true,"i":"","n":"quint8","t":"quint8: QUInt8","d":"torch","k":"val"},
{"l":"https://storch.dev/api/torch.html#rand[D<:|[FloatNN,ComplexNN]](size:Seq[Int],dtype:D,layout:Layout,device:Device,requiresGrad:Boolean):Tensor[D]=Tensor.apply[D](torch.torch_rand(intArrayOps(size.toArray[Int](ClassTag.apply[Int](classOf[Int]))).map[Long](((_$6:Int)=>_$6.toLong))(ClassTag.apply[Long](classOf[Long])),NativeConverters.tensorOptions(dtype,layout,device,requiresGrad,NativeConverters.tensorOptions$default$5)))","e":true,"i":"","n":"rand","t":"rand[D <: FloatNN | ComplexNN](size: Seq[Int], dtype: D, layout: Layout, device: Device, requiresGrad: Boolean): Tensor[D]","d":"torch","k":"def"},
{"l":"https://storch.dev/api/torch.html#randLike[D<:DType,D2<:|[DType,Derive]](input:Tensor[D],dtype:D2,layout:|[Layout,Derive],device:|[Device,Derive],requiresGrad:Boolean,memoryFormat:MemoryFormat):Tensor[DTypeOrDeriveFromTensor[D,D2]]=xLike[D,D2](input,dtype,layout,device,requiresGrad,memoryFormat,((x$0:Tensor,x$1:TensorOptions,x$2:MemoryFormatOptional)=>torch.torch_rand_like(x$0,x$1,x$2)))","e":true,"i":"","n":"randLike","t":"randLike[D <: DType, D2 <: DType | Derive](input: Tensor[D], dtype: D2, layout: Layout | Derive, device: Device | Derive, requiresGrad: Boolean, memoryFormat: MemoryFormat): Tensor[DTypeOrDeriveFromTensor[D, D2]]","d":"torch","k":"def"},
{"l":"https://storch.dev/api/torch.html#randn[D<:FloatNN](size:Seq[Int],dtype:D,layout:Layout,device:Device,requiresGrad:Boolean):Tensor[D]=Tensor.apply[D](torch.torch_rand(intArrayOps(size.toArray[Int](ClassTag.apply[Int](classOf[Int]))).map[Long](((_$7:Int)=>_$7.toLong))(ClassTag.apply[Long](classOf[Long])),NativeConverters.tensorOptions(dtype,layout,device,requiresGrad,NativeConverters.tensorOptions$default$5)))","e":true,"i":"","n":"randn","t":"randn[D <: FloatNN](size: Seq[Int], dtype: D, layout: Layout, device: Device, requiresGrad: Boolean): Tensor[D]","d":"torch","k":"def"},
{"l":"https://storch.dev/api/torch.html#randperm[D<:DType](n:Long,dtype:D,layout:Layout,device:Device,requiresGrad:Boolean,pinMemory:Boolean):Tensor[D]=Tensor.apply[D](torch.torch_randperm(n,NativeConverters.tensorOptions(dtype,layout,device,requiresGrad,pinMemory)))","e":true,"i":"","n":"randperm","t":"randperm[D <: DType](n: Long, dtype: D, layout: Layout, device: Device, requiresGrad: Boolean, pinMemory: Boolean): Tensor[D]","d":"torch","k":"def"},
{"l":"https://storch.dev/api/torch.html#scalaToDType[S<:ScalaType](s:S):DType=smatch{\ncase_:UByte=>\nuint8\ncase_:Byte=>\nint8\ncase_:Short=>\nint16\ncase_:Int=>\nint32\ncase_:Long=>\nint64\ncase_:Float=>\nfloat32\ncase_:Double=>\nfloat64\ncase_:Boolean=>\nbool\ncaseComplex(_:Double,_:Double)=>\ncomplex128\ncaseComplex(_:Float,_:Float)=>\ncomplex64\n}","e":true,"i":"","n":"scalaToDType","t":"scalaToDType[S <: ScalaType](s: S): DType","d":"torch","k":"def"},
{"l":"https://storch.dev/api/torch.html#setNumThreads(threads:Int):Unit=torch.set_num_threads(threads)","e":true,"i":"","n":"setNumThreads","t":"setNumThreads(threads: Int): Unit","d":"torch","k":"def"},
{"l":"https://storch.dev/api/torch.html#stack[D<:DType](tensors:Seq[Tensor[D]],dim:Int):Tensor[D]=Tensor.apply[D](torch.stack(newTensorArrayRef(newTensorVector(tensors.map[Tensor](((_$9:Tensor[D])=>_$9.native)):_*)),int2long(dim)))","e":true,"i":"","n":"stack","t":"stack[D <: DType](tensors: Seq[Tensor[D]], dim: Int): Tensor[D]","d":"torch","k":"def"},
{"l":"https://storch.dev/api/torch.html#uint8:UInt8=DType.uint8","e":true,"i":"","n":"uint8","t":"uint8: UInt8","d":"torch","k":"val"},
{"l":"https://storch.dev/api/torch.html#undefined:Undefined=DType.undefined","e":true,"i":"","n":"undefined","t":"undefined: Undefined","d":"torch","k":"val"},
{"l":"https://storch.dev/api/torch.html#zeros[D<:DType](size:|[Seq[Int],Int],dtype:D,layout:Layout,device:Device,requiresGrad:Boolean):Tensor[D]={\nvalnativeSize:Array[Long]=sizematch{\ncases:Seq[Int]=>\ns.map[Long](((_$1:Int)=>_$1.toLong)).toArray[Long](ClassTag.apply[Long](classOf[Long]))\ncases:Int=>\nArray.apply(`s₂`.toLong)\n}\nTensor.apply[D](torch.torch_zeros(longArrayOps(longArrayOps(nativeSize).toArray[Long](ClassTag.apply[Long](classOf[Long]))).map[Long](((_$2:Long)=>_$2.toLong))(ClassTag.apply[Long](classOf[Long])),NativeConverters.tensorOptions(dtype,layout,device,requiresGrad,NativeConverters.tensorOptions$default$5)))\n}","e":true,"i":"","n":"zeros","t":"zeros[D <: DType](size: Seq[Int] | Int, dtype: D, layout: Layout, device: Device, requiresGrad: Boolean): Tensor[D]","d":"torch","k":"def"},
{"l":"https://storch.dev/api/torch.html#zerosLike[D<:DType,D2<:|[DType,Derive]](input:Tensor[D],dtype:D2,layout:|[Layout,Derive],device:|[Device,Derive],requiresGrad:Boolean,memoryFormat:MemoryFormat):Tensor[DTypeOrDeriveFromTensor[D,D2]]=xLike[D,D2](input,dtype,layout,device,requiresGrad,memoryFormat,((x$0:Tensor,x$1:TensorOptions,x$2:MemoryFormatOptional)=>torch.torch_zeros_like(x$0,x$1,x$2)))","e":true,"i":"","n":"zerosLike","t":"zerosLike[D <: DType, D2 <: DType | Derive](input: Tensor[D], dtype: D2, layout: Layout | Derive, device: Device | Derive, requiresGrad: Boolean, memoryFormat: MemoryFormat): Tensor[DTypeOrDeriveFromTensor[D, D2]]","d":"torch","k":"def"},
{"l":"https://storch.dev/api/torch/BFloat16.html","e":true,"i":"","n":"BFloat16","t":"BFloat16 extends DType","d":"torch","k":"class"},
{"l":"https://storch.dev/api/torch/BFloat16Tensor.html","e":true,"i":"","n":"BFloat16Tensor","t":"BFloat16Tensor(native: Tensor) extends Tensor[BFloat16]","d":"torch","k":"class"},
{"l":"https://storch.dev/api/torch/Bool.html","e":true,"i":"","n":"Bool","t":"Bool extends DType","d":"torch","k":"class"},
{"l":"https://storch.dev/api/torch/BoolTensor.html","e":true,"i":"","n":"BoolTensor","t":"BoolTensor(native: Tensor) extends Tensor[Bool]","d":"torch","k":"class"},
{"l":"https://storch.dev/api/torch/Complex128.html","e":true,"i":"","n":"Complex128","t":"Complex128 extends DType","d":"torch","k":"class"},
{"l":"https://storch.dev/api/torch/Complex128Tensor.html","e":true,"i":"","n":"Complex128Tensor","t":"Complex128Tensor(native: Tensor) extends Tensor[Complex128]","d":"torch","k":"class"},
{"l":"https://storch.dev/api/torch/Complex32.html","e":true,"i":"","n":"Complex32","t":"Complex32 extends DType","d":"torch","k":"class"},
{"l":"https://storch.dev/api/torch/Complex32Tensor.html","e":true,"i":"","n":"Complex32Tensor","t":"Complex32Tensor(native: Tensor) extends Tensor[Complex32]","d":"torch","k":"class"},
{"l":"https://storch.dev/api/torch/Complex64.html","e":true,"i":"","n":"Complex64","t":"Complex64 extends DType","d":"torch","k":"class"},
{"l":"https://storch.dev/api/torch/Complex64Tensor.html","e":true,"i":"","n":"Complex64Tensor","t":"Complex64Tensor(native: Tensor) extends Tensor[Complex64]","d":"torch","k":"class"},
{"l":"https://storch.dev/api/torch/DType.html","e":true,"i":"","n":"DType","t":"DType","d":"torch","k":"class"},
{"l":"https://storch.dev/api/torch/DType$.html","e":true,"i":"","n":"DType","t":"DType","d":"torch","k":"object"},
{"l":"https://storch.dev/api/torch/DType$$bfloat16$.html","e":true,"i":"","n":"bfloat16","t":"bfloat16 extends BFloat16","d":"torch.DType","k":"object"},
{"l":"https://storch.dev/api/torch/DType$$bool$.html","e":true,"i":"","n":"bool","t":"bool extends Bool","d":"torch.DType","k":"object"},
{"l":"https://storch.dev/api/torch/DType$$complex128$.html","e":true,"i":"","n":"complex128","t":"complex128 extends Complex128","d":"torch.DType","k":"object"},
{"l":"https://storch.dev/api/torch/DType$$complex32$.html","e":true,"i":"","n":"complex32","t":"complex32 extends Complex32","d":"torch.DType","k":"object"},
{"l":"https://storch.dev/api/torch/DType$$complex64$.html","e":true,"i":"","n":"complex64","t":"complex64 extends Complex64","d":"torch.DType","k":"object"},
{"l":"https://storch.dev/api/torch/DType$$float16$.html","e":true,"i":"","n":"float16","t":"float16 extends Float16","d":"torch.DType","k":"object"},
{"l":"https://storch.dev/api/torch/DType$$float32$.html","e":true,"i":"","n":"float32","t":"float32 extends Float32","d":"torch.DType","k":"object"},
{"l":"https://storch.dev/api/torch/DType$$float64$.html","e":true,"i":"","n":"float64","t":"float64 extends Float64","d":"torch.DType","k":"object"},
{"l":"https://storch.dev/api/torch/DType$$int16$.html","e":true,"i":"","n":"int16","t":"int16 extends Int16","d":"torch.DType","k":"object"},
{"l":"https://storch.dev/api/torch/DType$$int32$.html","e":true,"i":"","n":"int32","t":"int32 extends Int32","d":"torch.DType","k":"object"},
{"l":"https://storch.dev/api/torch/DType$$int64$.html","e":true,"i":"","n":"int64","t":"int64 extends Int64","d":"torch.DType","k":"object"},
{"l":"https://storch.dev/api/torch/DType$$int8$.html","e":true,"i":"","n":"int8","t":"int8 extends Int8","d":"torch.DType","k":"object"},
{"l":"https://storch.dev/api/torch/DType$$numoptions$.html","e":true,"i":"","n":"numoptions","t":"numoptions extends NumOptions","d":"torch.DType","k":"object"},
{"l":"https://storch.dev/api/torch/DType$$qint32$.html","e":true,"i":"","n":"qint32","t":"qint32 extends QInt32","d":"torch.DType","k":"object"},
{"l":"https://storch.dev/api/torch/DType$$qint8$.html","e":true,"i":"","n":"qint8","t":"qint8 extends QInt8","d":"torch.DType","k":"object"},
{"l":"https://storch.dev/api/torch/DType$$quint2x4$.html","e":true,"i":"","n":"quint2x4","t":"quint2x4 extends QUInt2x4","d":"torch.DType","k":"object"},
{"l":"https://storch.dev/api/torch/DType$$quint4x2$.html","e":true,"i":"","n":"quint4x2","t":"quint4x2 extends QUInt4x2","d":"torch.DType","k":"object"},
{"l":"https://storch.dev/api/torch/DType$$quint8$.html","e":true,"i":"","n":"quint8","t":"quint8 extends QUInt8","d":"torch.DType","k":"object"},
{"l":"https://storch.dev/api/torch/DType$$uint8$.html","e":true,"i":"","n":"uint8","t":"uint8 extends UInt8","d":"torch.DType","k":"object"},
{"l":"https://storch.dev/api/torch/DType$$undefined$.html","e":true,"i":"","n":"undefined","t":"undefined extends Undefined","d":"torch.DType","k":"object"},
{"l":"https://storch.dev/api/torch/Derive.html","e":true,"i":"","n":"Derive","t":"Derive","d":"torch","k":"class"},
{"l":"https://storch.dev/api/torch/Device.html","e":true,"i":"","n":"Device","t":"Device(device: DeviceType, index: Byte)","d":"torch","k":"class"},
{"l":"https://storch.dev/api/torch/Device$.html","e":true,"i":"","n":"Device","t":"Device","d":"torch","k":"object"},
{"l":"https://storch.dev/api/torch/Device$.html#CPU:Device=Device.apply(DeviceType.CPU,Device.$lessinit$greater$default$2)","e":true,"i":"","n":"CPU","t":"CPU: Device","d":"torch.Device","k":"val"},
{"l":"https://storch.dev/api/torch/Device$.html#CUDA:Device=Device.apply(DeviceType.CUDA,Device.$lessinit$greater$default$2)","e":true,"i":"","n":"CUDA","t":"CUDA: Device","d":"torch.Device","k":"val"},
{"l":"https://storch.dev/api/torch/Device$.html#apply(device:String,index:Byte):Device=Device.apply(DeviceType.apply(device),index)","e":true,"i":"","n":"apply","t":"apply(device: String, index: Byte): Device","d":"torch.Device","k":"def"},
{"l":"https://storch.dev/api/torch/Device$.html#apply(device:String):Device=Device.apply(device,(-1:Byte))","e":true,"i":"","n":"apply","t":"apply(device: String): Device","d":"torch.Device","k":"def"},
{"l":"https://storch.dev/api/torch/DeviceType.html","e":true,"i":"","n":"DeviceType","t":"DeviceType","d":"torch","k":"enum"},
{"l":"https://storch.dev/api/torch/DeviceType$.html#CPU:DeviceType=$new(0,\"CPU\")","e":true,"i":"","n":"CPU","t":"CPU extends DeviceType","d":"torch.DeviceType","k":"case"},
{"l":"https://storch.dev/api/torch/DeviceType$.html#CUDA:DeviceType=$new(1,\"CUDA\")","e":true,"i":"","n":"CUDA","t":"CUDA extends DeviceType","d":"torch.DeviceType","k":"case"},
{"l":"https://storch.dev/api/torch/DeviceType$.html#MKLDNN:DeviceType=$new(2,\"MKLDNN\")","e":true,"i":"","n":"MKLDNN","t":"MKLDNN extends DeviceType","d":"torch.DeviceType","k":"case"},
{"l":"https://storch.dev/api/torch/DeviceType$.html#OPENGL:DeviceType=$new(3,\"OPENGL\")","e":true,"i":"","n":"OPENGL","t":"OPENGL extends DeviceType","d":"torch.DeviceType","k":"case"},
{"l":"https://storch.dev/api/torch/DeviceType$.html#OPENCL:DeviceType=$new(4,\"OPENCL\")","e":true,"i":"","n":"OPENCL","t":"OPENCL extends DeviceType","d":"torch.DeviceType","k":"case"},
{"l":"https://storch.dev/api/torch/DeviceType$.html#IDEEP:DeviceType=$new(5,\"IDEEP\")","e":true,"i":"","n":"IDEEP","t":"IDEEP extends DeviceType","d":"torch.DeviceType","k":"case"},
{"l":"https://storch.dev/api/torch/DeviceType$.html#HIP:DeviceType=$new(6,\"HIP\")","e":true,"i":"","n":"HIP","t":"HIP extends DeviceType","d":"torch.DeviceType","k":"case"},
{"l":"https://storch.dev/api/torch/DeviceType$.html#FPGA:DeviceType=$new(7,\"FPGA\")","e":true,"i":"","n":"FPGA","t":"FPGA extends DeviceType","d":"torch.DeviceType","k":"case"},
{"l":"https://storch.dev/api/torch/DeviceType$.html#ORT:DeviceType=$new(8,\"ORT\")","e":true,"i":"","n":"ORT","t":"ORT extends DeviceType","d":"torch.DeviceType","k":"case"},
{"l":"https://storch.dev/api/torch/DeviceType$.html#XLA:DeviceType=$new(9,\"XLA\")","e":true,"i":"","n":"XLA","t":"XLA extends DeviceType","d":"torch.DeviceType","k":"case"},
{"l":"https://storch.dev/api/torch/DeviceType$.html#Vulkan:DeviceType=$new(10,\"Vulkan\")","e":true,"i":"","n":"Vulkan","t":"Vulkan extends DeviceType","d":"torch.DeviceType","k":"case"},
{"l":"https://storch.dev/api/torch/DeviceType$.html#Metal:DeviceType=$new(11,\"Metal\")","e":true,"i":"","n":"Metal","t":"Metal extends DeviceType","d":"torch.DeviceType","k":"case"},
{"l":"https://storch.dev/api/torch/DeviceType$.html#XPU:DeviceType=$new(12,\"XPU\")","e":true,"i":"","n":"XPU","t":"XPU extends DeviceType","d":"torch.DeviceType","k":"case"},
{"l":"https://storch.dev/api/torch/DeviceType$.html#MLC:DeviceType=$new(13,\"MLC\")","e":true,"i":"","n":"MLC","t":"MLC extends DeviceType","d":"torch.DeviceType","k":"case"},
{"l":"https://storch.dev/api/torch/DeviceType$.html#Meta:DeviceType=$new(14,\"Meta\")","e":true,"i":"","n":"Meta","t":"Meta extends DeviceType","d":"torch.DeviceType","k":"case"},
{"l":"https://storch.dev/api/torch/DeviceType$.html#HPU:DeviceType=$new(15,\"HPU\")","e":true,"i":"","n":"HPU","t":"HPU extends DeviceType","d":"torch.DeviceType","k":"case"},
{"l":"https://storch.dev/api/torch/DeviceType$.html#VE:DeviceType=$new(16,\"VE\")","e":true,"i":"","n":"VE","t":"VE extends DeviceType","d":"torch.DeviceType","k":"case"},
{"l":"https://storch.dev/api/torch/DeviceType$.html#Lazy:DeviceType=$new(17,\"Lazy\")","e":true,"i":"","n":"Lazy","t":"Lazy extends DeviceType","d":"torch.DeviceType","k":"case"},
{"l":"https://storch.dev/api/torch/DeviceType$.html#COMPILE_TIME_MAX_DEVICE_TYPES:DeviceType=$new(18,\"COMPILE_TIME_MAX_DEVICE_TYPES\")","e":true,"i":"","n":"COMPILE_TIME_MAX_DEVICE_TYPES","t":"COMPILE_TIME_MAX_DEVICE_TYPES extends DeviceType","d":"torch.DeviceType","k":"case"},
{"l":"https://storch.dev/api/torch/DeviceType$.html","e":true,"i":"","n":"DeviceType","t":"DeviceType","d":"torch","k":"object"},
{"l":"https://storch.dev/api/torch/DeviceType$.html#apply(v:String):DeviceType={\nvalindex:Int=deviceTypesLowerCase.indexOf[String](v)\nif(index.==(-1))DeviceType.valueOf(v)elseDeviceType.fromOrdinal(index)\n}","e":true,"i":"","n":"apply","t":"apply(v: String): DeviceType","d":"torch.DeviceType","k":"def"},
{"l":"https://storch.dev/api/torch/DeviceType$.html#deviceTypesLowerCase:Seq[String]=ArraySeq.unsafeWrapArray[DeviceType](DeviceType.values).map[String](((_$1:DeviceType)=>_$1.toString().toLowerCase()))","e":true,"i":"","n":"deviceTypesLowerCase","t":"deviceTypesLowerCase: Seq[String]","d":"torch.DeviceType","k":"val"},
{"l":"https://storch.dev/api/torch/Float16.html","e":true,"i":"","n":"Float16","t":"Float16 extends DType","d":"torch","k":"class"},
{"l":"https://storch.dev/api/torch/Float16Tensor.html","e":true,"i":"","n":"Float16Tensor","t":"Float16Tensor(native: Tensor) extends Tensor[Float16]","d":"torch","k":"class"},
{"l":"https://storch.dev/api/torch/Float32.html","e":true,"i":"","n":"Float32","t":"Float32 extends DType","d":"torch","k":"class"},
{"l":"https://storch.dev/api/torch/Float32Tensor.html","e":true,"i":"","n":"Float32Tensor","t":"Float32Tensor(native: Tensor) extends Tensor[Float32]","d":"torch","k":"class"},
{"l":"https://storch.dev/api/torch/Float64.html","e":true,"i":"","n":"Float64","t":"Float64 extends DType","d":"torch","k":"class"},
{"l":"https://storch.dev/api/torch/Float64Tensor.html","e":true,"i":"","n":"Float64Tensor","t":"Float64Tensor(native: Tensor) extends Tensor[Float64]","d":"torch","k":"class"},
{"l":"https://storch.dev/api/torch/Int16.html","e":true,"i":"","n":"Int16","t":"Int16 extends DType","d":"torch","k":"class"},
{"l":"https://storch.dev/api/torch/Int16Tensor.html","e":true,"i":"","n":"Int16Tensor","t":"Int16Tensor(native: Tensor) extends Tensor[Int16]","d":"torch","k":"class"},
{"l":"https://storch.dev/api/torch/Int32.html","e":true,"i":"","n":"Int32","t":"Int32 extends DType","d":"torch","k":"class"},
{"l":"https://storch.dev/api/torch/Int32Tensor.html","e":true,"i":"","n":"Int32Tensor","t":"Int32Tensor(native: Tensor) extends Tensor[Int32]","d":"torch","k":"class"},
{"l":"https://storch.dev/api/torch/Int64.html","e":true,"i":"","n":"Int64","t":"Int64 extends DType","d":"torch","k":"class"},
{"l":"https://storch.dev/api/torch/Int64Tensor.html","e":true,"i":"","n":"Int64Tensor","t":"Int64Tensor(native: Tensor) extends Tensor[Int64]","d":"torch","k":"class"},
{"l":"https://storch.dev/api/torch/Int8.html","e":true,"i":"","n":"Int8","t":"Int8 extends DType","d":"torch","k":"class"},
{"l":"https://storch.dev/api/torch/Int8Tensor.html","e":true,"i":"","n":"Int8Tensor","t":"Int8Tensor(native: Tensor) extends Tensor[Int8]","d":"torch","k":"class"},
{"l":"https://storch.dev/api/torch/Layout.html","e":true,"i":"","n":"Layout","t":"Layout","d":"torch","k":"enum"},
{"l":"https://storch.dev/api/torch/Layout$.html#Strided:Layout=$new(0,\"Strided\")","e":true,"i":"","n":"Strided","t":"Strided extends Layout","d":"torch.Layout","k":"case"},
{"l":"https://storch.dev/api/torch/Layout$.html#Sparse:Layout=$new(1,\"Sparse\")","e":true,"i":"","n":"Sparse","t":"Sparse extends Layout","d":"torch.Layout","k":"case"},
{"l":"https://storch.dev/api/torch/Layout$.html#SparseCsr:Layout=$new(2,\"SparseCsr\")","e":true,"i":"","n":"SparseCsr","t":"SparseCsr extends Layout","d":"torch.Layout","k":"case"},
{"l":"https://storch.dev/api/torch/Layout$.html#Mkldnn:Layout=$new(3,\"Mkldnn\")","e":true,"i":"","n":"Mkldnn","t":"Mkldnn extends Layout","d":"torch.Layout","k":"case"},
{"l":"https://storch.dev/api/torch/Layout$.html#NumOptions:Layout=$new(4,\"NumOptions\")","e":true,"i":"","n":"NumOptions","t":"NumOptions extends Layout","d":"torch.Layout","k":"case"},
{"l":"https://storch.dev/api/torch/Layout$.html","e":true,"i":"","n":"Layout","t":"Layout","d":"torch","k":"object"},
{"l":"https://storch.dev/api/torch/MemoryFormat.html","e":true,"i":"","n":"MemoryFormat","t":"MemoryFormat","d":"torch","k":"enum"},
{"l":"https://storch.dev/api/torch/MemoryFormat$.html#Contiguous:MemoryFormat=$new(0,\"Contiguous\")","e":true,"i":"","n":"Contiguous","t":"Contiguous extends MemoryFormat","d":"torch.MemoryFormat","k":"case"},
{"l":"https://storch.dev/api/torch/MemoryFormat$.html#Preserve:MemoryFormat=$new(1,\"Preserve\")","e":true,"i":"","n":"Preserve","t":"Preserve extends MemoryFormat","d":"torch.MemoryFormat","k":"case"},
{"l":"https://storch.dev/api/torch/MemoryFormat$.html#ChannelsLast:MemoryFormat=$new(2,\"ChannelsLast\")","e":true,"i":"","n":"ChannelsLast","t":"ChannelsLast extends MemoryFormat","d":"torch.MemoryFormat","k":"case"},
{"l":"https://storch.dev/api/torch/MemoryFormat$.html#ChannelsLast3d:MemoryFormat=$new(3,\"ChannelsLast3d\")","e":true,"i":"","n":"ChannelsLast3d","t":"ChannelsLast3d extends MemoryFormat","d":"torch.MemoryFormat","k":"case"},
{"l":"https://storch.dev/api/torch/NumOptions.html","e":true,"i":"","n":"NumOptions","t":"NumOptions extends DType","d":"torch","k":"class"},
{"l":"https://storch.dev/api/torch/NumOptionsTensor.html","e":true,"i":"","n":"NumOptionsTensor","t":"NumOptionsTensor(native: Tensor) extends Tensor[NumOptions]","d":"torch","k":"class"},
{"l":"https://storch.dev/api/torch/QInt32.html","e":true,"i":"","n":"QInt32","t":"QInt32 extends DType","d":"torch","k":"class"},
{"l":"https://storch.dev/api/torch/QInt32Tensor.html","e":true,"i":"","n":"QInt32Tensor","t":"QInt32Tensor(native: Tensor) extends Tensor[QInt32]","d":"torch","k":"class"},
{"l":"https://storch.dev/api/torch/QInt8.html","e":true,"i":"","n":"QInt8","t":"QInt8 extends DType","d":"torch","k":"class"},
{"l":"https://storch.dev/api/torch/QInt8Tensor.html","e":true,"i":"","n":"QInt8Tensor","t":"QInt8Tensor(native: Tensor) extends Tensor[QInt8]","d":"torch","k":"class"},
{"l":"https://storch.dev/api/torch/QUInt2x4.html","e":true,"i":"","n":"QUInt2x4","t":"QUInt2x4 extends DType","d":"torch","k":"class"},
{"l":"https://storch.dev/api/torch/QUInt2x4Tensor.html","e":true,"i":"","n":"QUInt2x4Tensor","t":"QUInt2x4Tensor(native: Tensor) extends Tensor[QUInt4x2]","d":"torch","k":"class"},
{"l":"https://storch.dev/api/torch/QUInt4x2.html","e":true,"i":"","n":"QUInt4x2","t":"QUInt4x2 extends DType","d":"torch","k":"class"},
{"l":"https://storch.dev/api/torch/QUInt4x2Tensor.html","e":true,"i":"","n":"QUInt4x2Tensor","t":"QUInt4x2Tensor(native: Tensor) extends Tensor[Complex32]","d":"torch","k":"class"},
{"l":"https://storch.dev/api/torch/QUInt8.html","e":true,"i":"","n":"QUInt8","t":"QUInt8 extends DType","d":"torch","k":"class"},
{"l":"https://storch.dev/api/torch/QUInt8Tensor.html","e":true,"i":"","n":"QUInt8Tensor","t":"QUInt8Tensor(native: Tensor) extends Tensor[QUInt8]","d":"torch","k":"class"},
{"l":"https://storch.dev/api/torch/Tensor.html","e":true,"i":"","n":"Tensor","t":"Tensor[D <: DType](val native: Tensor)","d":"torch","k":"class"},
{"l":"https://storch.dev/api/torch/Tensor.html#*[S<:ScalaType](s:S):Tensor[Promoted[D,ScalaToDType[S]]]=Tensor.this.mul[S](s)","e":true,"i":"","n":"*","t":"*[S <: ScalaType](s: S): Tensor[Promoted[D, ScalaToDType[S]]]","d":"torch.Tensor","k":"def"},
{"l":"https://storch.dev/api/torch/Tensor.html#*[D2<:DType](t:Tensor[D2]):Tensor[Promoted[D,D2]]=Tensor.this.mul[D2](t)","e":true,"i":"","n":"*","t":"*[D2 <: DType](t: Tensor[D2]): Tensor[Promoted[D, D2]]","d":"torch.Tensor","k":"def"},
{"l":"https://storch.dev/api/torch/Tensor.html#*=[D2<:DType](t:Tensor[D2]):this.type={\nnative.mul_(t.native)\nthis\n}","e":true,"i":"","n":"*=","t":"*=[D2 <: DType](t: Tensor[D2]): Tensor.this.type","d":"torch.Tensor","k":"def"},
{"l":"https://storch.dev/api/torch/Tensor.html#*=[S<:ScalaType](s:S):this.type={\nnative.mul_(toScalar(s))\nthis\n}","e":true,"i":"","n":"*=","t":"*=[S <: ScalaType](s: S): Tensor.this.type","d":"torch.Tensor","k":"def"},
{"l":"https://storch.dev/api/torch/Tensor.html#+[S<:ScalaType](s:S):Tensor[Promoted[D,ScalaToDType[S]]]=Tensor.this.add[S](s)","e":true,"i":"","n":"+","t":"+[S <: ScalaType](s: S): Tensor[Promoted[D, ScalaToDType[S]]]","d":"torch.Tensor","k":"def"},
{"l":"https://storch.dev/api/torch/Tensor.html#+[D2<:DType](t:Tensor[D2]):Tensor[Promoted[D,D2]]=Tensor.this.add[D2](t)","e":true,"i":"","n":"+","t":"+[D2 <: DType](t: Tensor[D2]): Tensor[Promoted[D, D2]]","d":"torch.Tensor","k":"def"},
{"l":"https://storch.dev/api/torch/Tensor.html#+=[D2<:DType](t:Tensor[D2]):this.type={\nnative.add_(t.native)\nthis\n}","e":true,"i":"","n":"+=","t":"+=[D2 <: DType](t: Tensor[D2]): Tensor.this.type","d":"torch.Tensor","k":"def"},
{"l":"https://storch.dev/api/torch/Tensor.html#+=[S<:ScalaType](s:S):this.type={\nnative.add_(toScalar(s))\nthis\n}","e":true,"i":"","n":"+=","t":"+=[S <: ScalaType](s: S): Tensor.this.type","d":"torch.Tensor","k":"def"},
{"l":"https://storch.dev/api/torch/Tensor.html#-[S<:ScalaType](s:S):Tensor[Promoted[D,ScalaToDType[S]]]=Tensor.this.sub[S](s)","e":true,"i":"","n":"-","t":"-[S <: ScalaType](s: S): Tensor[Promoted[D, ScalaToDType[S]]]","d":"torch.Tensor","k":"def"},
{"l":"https://storch.dev/api/torch/Tensor.html#-[D2<:DType](t:Tensor[D2]):Tensor[Promoted[D,D2]]=Tensor.this.sub[D2](t)","e":true,"i":"","n":"-","t":"-[D2 <: DType](t: Tensor[D2]): Tensor[Promoted[D, D2]]","d":"torch.Tensor","k":"def"},
{"l":"https://storch.dev/api/torch/Tensor.html#-=[D2<:DType](t:Tensor[D2]):this.type={\nnative.sub_(t.native)\nthis\n}","e":true,"i":"","n":"-=","t":"-=[D2 <: DType](t: Tensor[D2]): Tensor.this.type","d":"torch.Tensor","k":"def"},
{"l":"https://storch.dev/api/torch/Tensor.html#-=[S<:ScalaType](s:S):this.type={\nnative.sub_(toScalar(s))\nthis\n}","e":true,"i":"","n":"-=","t":"-=[S <: ScalaType](s: S): Tensor.this.type","d":"torch.Tensor","k":"def"},
{"l":"https://storch.dev/api/torch/Tensor.html#/[S<:ScalaType](s:S):Tensor[Div[D,ScalaToDType[S]]]=Tensor.this.div[S](s)","e":true,"i":"","n":"/","t":"/[S <: ScalaType](s: S): Tensor[Div[D, ScalaToDType[S]]]","d":"torch.Tensor","k":"def"},
{"l":"https://storch.dev/api/torch/Tensor.html#/[D2<:DType](t:Tensor[D2]):Tensor[Div[D,D2]]=Tensor.this.div[D2](t)","e":true,"i":"","n":"/","t":"/[D2 <: DType](t: Tensor[D2]): Tensor[Div[D, D2]]","d":"torch.Tensor","k":"def"},
{"l":"https://storch.dev/api/torch/Tensor.html#/=[D2<:DType](t:Tensor[D2])(x$2:<:<[D,FloatNN]):this.type={\nnative.div_(t.native)\nthis\n}","e":true,"i":"","n":"/=","t":"/=[D2 <: DType](t: Tensor[D2])(using D <:< FloatNN): Tensor.this.type","d":"torch.Tensor","k":"def"},
{"l":"https://storch.dev/api/torch/Tensor.html#/=[S<:ScalaType](s:S)(x$2:<:<[D,FloatNN]):this.type={\nnative.div_(toScalar(s))\nthis\n}","e":true,"i":"","n":"/=","t":"/=[S <: ScalaType](s: S)(using D <:< FloatNN): Tensor.this.type","d":"torch.Tensor","k":"def"},
{"l":"https://storch.dev/api/torch/Tensor.html#==(other:ScalaType):Tensor[Bool]=Tensor.this.eq(other)","e":true,"i":"","n":"==","t":"==(other: ScalaType): Tensor[Bool]","d":"torch.Tensor","k":"def"},
{"l":"https://storch.dev/api/torch/Tensor.html#@[D2<:DType](u:Tensor[D2]):Tensor[Promoted[D,D2]]=Tensor.this.matmul[D2](u)","e":true,"i":"","n":"`@`","t":"`@`[D2 <: DType](u: Tensor[D2]): Tensor[Promoted[D, D2]]","d":"torch.Tensor","k":"def"},
{"l":"https://storch.dev/api/torch/Tensor.html#abs:Tensor[D]=Tensor.apply[D](native.abs())","e":true,"i":"","n":"abs","t":"abs: Tensor[D]","d":"torch.Tensor","k":"def"},
{"l":"https://storch.dev/api/torch/Tensor.html#acos:Tensor[D]=Tensor.apply[D](native.acos())","e":true,"i":"","n":"acos","t":"acos: Tensor[D]","d":"torch.Tensor","k":"def"},
{"l":"https://storch.dev/api/torch/Tensor.html#add[S<:ScalaType](s:S):Tensor[Promoted[D,ScalaToDType[S]]]=Tensor.apply[Promoted[D,ScalaToDType[S]]](native.add(toScalar(s)))","e":true,"i":"","n":"add","t":"add[S <: ScalaType](s: S): Tensor[Promoted[D, ScalaToDType[S]]]","d":"torch.Tensor","k":"def"},
{"l":"https://storch.dev/api/torch/Tensor.html#add[D2<:DType](t:Tensor[D2]):Tensor[Promoted[D,D2]]=Tensor.apply[Promoted[D,D2]](native.add(t.native))","e":true,"i":"","n":"add","t":"add[D2 <: DType](t: Tensor[D2]): Tensor[Promoted[D, D2]]","d":"torch.Tensor","k":"def"},
{"l":"https://storch.dev/api/torch/Tensor.html#all:Tensor[Bool]=Tensor.apply[Bool](native.all())","e":true,"i":"","n":"all","t":"all: Tensor[Bool]","d":"torch.Tensor","k":"def"},
{"l":"https://storch.dev/api/torch/Tensor.html#any:Tensor[Bool]=Tensor.apply[Bool](native.any())","e":true,"i":"","n":"any","t":"any: Tensor[Bool]","d":"torch.Tensor","k":"def"},
{"l":"https://storch.dev/api/torch/Tensor.html#any(dim:Int,keepdim:Boolean):Tensor[Bool]=Tensor.apply[Bool](native.any(int2long(dim),keepdim))","e":true,"i":"","n":"any","t":"any(dim: Int, keepdim: Boolean): Tensor[Bool]","d":"torch.Tensor","k":"def"},
{"l":"https://storch.dev/api/torch/Tensor.html#apply[T<:|[Boolean,Long]](indices:Slice|Int|Long|Tensor[Bool]|Tensor[UInt8]|Tensor[Int64]|Seq[T]|None|Ellipsis*)(implicitevidence$2:ClassTag[T]):Tensor[D]=Tensor.this.index[T](indices:_*)(evidence$2)","e":true,"i":"","n":"apply","t":"apply[T <: Boolean | Long : ClassTag](indices: Slice | Int | Long | Tensor[Bool] | Tensor[UInt8] | Tensor[Int64] | Seq[T] | None.type | Ellipsis*): Tensor[D]","d":"torch.Tensor","k":"def"},
{"l":"https://storch.dev/api/torch/Tensor.html#argmax(dim:|[Long,Option[Long]],keepdim:Boolean):Tensor[Int64]=Tensor.apply[Int64](native.argmax(NativeConverters.toOptional(dim),keepdim))","e":true,"i":"","n":"argmax","t":"argmax(dim: Long | Option[Long], keepdim: Boolean): Tensor[Int64]","d":"torch.Tensor","k":"def"},
{"l":"https://storch.dev/api/torch/Tensor.html#backward():Unit=native.backward()","e":true,"i":"","n":"backward","t":"backward(): Unit","d":"torch.Tensor","k":"def"},
{"l":"https://storch.dev/api/torch/Tensor.html#clone(memoryFormat:MemoryFormat):Tensor[D]=Tensor.apply[D](native.clone(memoryFormat.toNativeOptional))","e":true,"i":"","n":"clone","t":"clone(memoryFormat: MemoryFormat): Tensor[D]","d":"torch.Tensor","k":"def"},
{"l":"https://storch.dev/api/torch/Tensor.html#contiguous:Tensor[D]=Tensor.apply[D](native.contiguous())","e":true,"i":"","n":"contiguous","t":"contiguous: Tensor[D]","d":"torch.Tensor","k":"def"},
{"l":"https://storch.dev/api/torch/Tensor.html#copy_(src:Tensor[_>:Nothing<:Any],nonBlocking:Boolean):this.type={\nnative.copy_(src.native,nonBlocking)\nthis\n}","e":true,"i":"","n":"copy_","t":"copy_(src: Tensor[_], nonBlocking: Boolean): Tensor.this.type","d":"torch.Tensor","k":"def"},
{"l":"https://storch.dev/api/torch/Tensor.html#detach():Tensor[D]=Tensor.apply[D](native.detach())","e":true,"i":"","n":"detach","t":"detach(): Tensor[D]","d":"torch.Tensor","k":"def"},
{"l":"https://storch.dev/api/torch/Tensor.html#device:Device=Device.apply(native.device())","e":true,"i":"","n":"device","t":"device: Device","d":"torch.Tensor","k":"def"},
{"l":"https://storch.dev/api/torch/Tensor.html#dim:Int=native.dim().toInt","e":true,"i":"","n":"dim","t":"dim: Int","d":"torch.Tensor","k":"def"},
{"l":"https://storch.dev/api/torch/Tensor.html#div[S<:ScalaType](s:S):Tensor[Div[D,ScalaToDType[S]]]=Tensor.apply[Div[D,ScalaToDType[S]]](native.div(toScalar(s)))","e":true,"i":"","n":"div","t":"div[S <: ScalaType](s: S): Tensor[Div[D, ScalaToDType[S]]]","d":"torch.Tensor","k":"def"},
{"l":"https://storch.dev/api/torch/Tensor.html#div[D2<:DType](other:Tensor[D2]):Tensor[Div[D,D2]]=Tensor.apply[Div[D,D2]](native.div(Tensor.this.t.native))","e":true,"i":"","n":"div","t":"div[D2 <: DType](other: Tensor[D2]): Tensor[Div[D, D2]]","d":"torch.Tensor","k":"def"},
{"l":"https://storch.dev/api/torch/Tensor.html#dtype:D","e":true,"i":"","n":"dtype","t":"dtype: D","d":"torch.Tensor","k":"def"},
{"l":"https://storch.dev/api/torch/Tensor.html#eq(other:ScalaType):Tensor[Bool]=Tensor.apply[Bool](native.eq(toScalar(other)))","e":true,"i":"","n":"eq","t":"eq(other: ScalaType): Tensor[Bool]","d":"torch.Tensor","k":"def"},
{"l":"https://storch.dev/api/torch/Tensor.html#eq(other:Tensor[_>:Nothing<:Any]):Tensor[Bool]=Tensor.apply[Bool](native.eq(other.native))","e":true,"i":"","n":"eq","t":"eq(other: Tensor[_]): Tensor[Bool]","d":"torch.Tensor","k":"def"},
{"l":"https://storch.dev/api/torch/Tensor.html#equal(other:Tensor[D]):Boolean=native.equal(other.native)","e":true,"i":"","n":"equal","t":"equal(other: Tensor[D]): Boolean","d":"torch.Tensor","k":"def"},
{"l":"https://storch.dev/api/torch/Tensor.html#flatten:Tensor[D]=Tensor.apply[D](native.flatten())","e":true,"i":"","n":"flatten","t":"flatten: Tensor[D]","d":"torch.Tensor","k":"def"},
{"l":"https://storch.dev/api/torch/Tensor.html#flatten(startDim:Int,endDim:Int):Tensor[D]=Tensor.apply[D](native.flatten(int2long(startDim),int2long(endDim)))","e":true,"i":"","n":"flatten","t":"flatten(startDim: Int, endDim: Int): Tensor[D]","d":"torch.Tensor","k":"def"},
{"l":"https://storch.dev/api/torch/Tensor.html#grad:Tensor[|[D,Undefined]]=Tensor.apply[D|Undefined](native.grad())","e":true,"i":"","n":"grad","t":"grad: Tensor[D | Undefined]","d":"torch.Tensor","k":"def"},
{"l":"https://storch.dev/api/torch/Tensor.html#index[T<:|[Boolean,Long]](indices:Slice|Int|Long|Tensor[Bool]|Tensor[UInt8]|Tensor[Int64]|Seq[T]|None|Ellipsis*)(implicitevidence$3:ClassTag[T]):Tensor[D]={\nvalnativeIndices:Seq[pytorch.TensorIndex]=indices.map[TensorIndex](((i:Slice|Int|Long|Tensor[Bool]|Tensor[UInt8]|Tensor[Int64]|Seq[T]|None|Ellipsis)=>imatch{\ncaseNone=>\nnewTensorIndex()\ncaset:Tensor[_$6]=>\nnewTensorIndex(t.native)\ncasesingleton:Int=>\nnewTensorIndex(singleton)\ncasesingleton:Long=>\nnewTensorIndex(`singleton₂`)\ncaseSlice(start,end,step)=>\nnewTensorIndex(newSlice(toOptional(start),toOptional(end),toOptional(step)))\ncases:Seq[T]@unchecked=>\nnewTensorIndex(Tensor.apply[T](s,Tensor.apply$default$2[T],Tensor.apply$default$3[T],Tensor.apply$default$4[T])(evidence$3).native)\ncasee:Ellipsis=>\nnewTensorIndex(newEllipsisIndexType())\n}))\nvalref:TensorIndexArrayRef=newTensorIndexArrayRef(newTensorIndexVector(nativeIndices.toArray[TensorIndex](ClassTag.apply[TensorIndex](classOf[TensorIndex])):_*))\nTensor.apply[D](native.index(ref))\n}","e":true,"i":"","n":"index","t":"index[T <: Boolean | Long : ClassTag](indices: Slice | Int | Long | Tensor[Bool] | Tensor[UInt8] | Tensor[Int64] | Seq[T] | None.type | Ellipsis*): Tensor[D]","d":"torch.Tensor","k":"def"},
{"l":"https://storch.dev/api/torch/Tensor.html#info:String=_root_.scala.StringContext.apply(\"tensordtype=\",\",shape=\",\",device=\",\"\").s(Tensor.this.dtype.toString(),Tensor.this.size.mkString(\"[\",\",\",\"]\"),Tensor.this.device.device)","e":true,"i":"","n":"info","t":"info: String","d":"torch.Tensor","k":"def"},
{"l":"https://storch.dev/api/torch/Tensor.html#isContiguous:Boolean=native.is_contiguous()","e":true,"i":"","n":"isContiguous","t":"isContiguous: Boolean","d":"torch.Tensor","k":"def"},
{"l":"https://storch.dev/api/torch/Tensor.html#isCuda:Boolean=native.is_cuda()","e":true,"i":"","n":"isCuda","t":"isCuda: Boolean","d":"torch.Tensor","k":"def"},
{"l":"https://storch.dev/api/torch/Tensor.html#isNonzero:Boolean=native.is_nonzero()","e":true,"i":"","n":"isNonzero","t":"isNonzero: Boolean","d":"torch.Tensor","k":"def"},
{"l":"https://storch.dev/api/torch/Tensor.html#isQuantized:Boolean=native.is_quantized()","e":true,"i":"","n":"isQuantized","t":"isQuantized: Boolean","d":"torch.Tensor","k":"def"},
{"l":"https://storch.dev/api/torch/Tensor.html#isnan:Tensor[Bool]=Tensor.apply[Bool](native.isnan())","e":true,"i":"","n":"isnan","t":"isnan: Tensor[Bool]","d":"torch.Tensor","k":"def"},
{"l":"https://storch.dev/api/torch/Tensor.html#item:DTypeToScala[D]={\nimportScalarType.{_}\nvalout:AnyVal=native.dtype().toScalarType().intern()match{\ncaseByte=>\nUByte.apply(native.item_int())\ncaseChar=>\nnative.item_byte()\ncaseShort=>\nnative.item_short()\ncaseInt=>\nnative.item_int()\ncaseLong=>\nnative.item_long()\ncaseHalf=>\nnative.item().toHalf().asFloat()\ncaseFloat=>\nnative.item_float()\ncaseDouble=>\nnative.item_double()\ncaseComplexHalf=>\n???\ncaseComplexFloat=>\n???\ncaseComplexDouble=>\n???\ncaseBool=>\nnative.item().toBool()\ncaseQInt8=>\nnative.item_byte()\ncaseQUInt8=>\nnative.item_short()\ncaseQInt32=>\nnative.item_int()\ncaseBFloat16=>\nnative.item().toBFloat16().asFloat()\ncaseQUInt4x2=>\n???\ncaseQUInt2x4=>\n???\ncase(Undefined|NumOptions)=>\n???\n}\nout.asInstanceOf[DTypeToScala[D]]\n}","e":true,"i":"","n":"item","t":"item: DTypeToScala[D]","d":"torch.Tensor","k":"def"},
{"l":"https://storch.dev/api/torch/Tensor.html#layout:Layout=Layout.fromNative(native.layout())","e":true,"i":"","n":"layout","t":"layout: Layout","d":"torch.Tensor","k":"def"},
{"l":"https://storch.dev/api/torch/Tensor.html#mH:Tensor[D]=Tensor.apply[D](native.mH())","e":true,"i":"","n":"mH","t":"mH: Tensor[D]","d":"torch.Tensor","k":"def"},
{"l":"https://storch.dev/api/torch/Tensor.html#mT:Tensor[D]=Tensor.apply[D](native.mT())","e":true,"i":"","n":"mT","t":"mT: Tensor[D]","d":"torch.Tensor","k":"def"},
{"l":"https://storch.dev/api/torch/Tensor.html#matmul[D2<:DType](u:Tensor[D2]):Tensor[Promoted[D,D2]]=Tensor.apply[Promoted[D,D2]](native.matmul(u.native))","e":true,"i":"","n":"matmul","t":"matmul[D2 <: DType](u: Tensor[D2]): Tensor[Promoted[D, D2]]","d":"torch.Tensor","k":"def"},
{"l":"https://storch.dev/api/torch/Tensor.html#max():Tensor[Int64]=Tensor.apply[Int64](native.max())","e":true,"i":"","n":"max","t":"max(): Tensor[Int64]","d":"torch.Tensor","k":"def"},
{"l":"https://storch.dev/api/torch/Tensor.html#max(dim:Long,keepdim:Boolean):TensorTuple[D]={\nvalnativeTuple:TensorTensorTuple=native.max(dim,keepdim)\nTensorTuple.apply[D](values=Tensor.apply[D](nativeTuple.get0()),indices=newInt64Tensor(nativeTuple.get1()))\n}","e":true,"i":"","n":"max","t":"max(dim: Long, keepdim: Boolean): TensorTuple[D]","d":"torch.Tensor","k":"def"},
{"l":"https://storch.dev/api/torch/Tensor.html#maximum[D2<:DType](other:Tensor[D2]):Tensor[Promoted[D,D2]]=Tensor.apply[Promoted[D,D2]](native.maximum(other.native))","e":true,"i":"","n":"maximum","t":"maximum[D2 <: DType](other: Tensor[D2]): Tensor[Promoted[D, D2]]","d":"torch.Tensor","k":"def"},
{"l":"https://storch.dev/api/torch/Tensor.html#mean:Tensor[D]=Tensor.apply[D](native.mean())","e":true,"i":"","n":"mean","t":"mean: Tensor[D]","d":"torch.Tensor","k":"def"},
{"l":"https://storch.dev/api/torch/Tensor.html#min():Tensor[Int64]=Tensor.apply[Int64](native.min())","e":true,"i":"","n":"min","t":"min(): Tensor[Int64]","d":"torch.Tensor","k":"def"},
{"l":"https://storch.dev/api/torch/Tensor.html#minimum[D2<:DType](other:Tensor[D2]):Tensor[Promoted[D,D2]]=Tensor.apply[Promoted[D,D2]](native.minimum(other.native))","e":true,"i":"","n":"minimum","t":"minimum[D2 <: DType](other: Tensor[D2]): Tensor[Promoted[D, D2]]","d":"torch.Tensor","k":"def"},
{"l":"https://storch.dev/api/torch/Tensor.html#mul[S<:ScalaType](s:S):Tensor[Promoted[D,ScalaToDType[S]]]=Tensor.apply[Promoted[D,ScalaToDType[S]]](native.mul(toScalar(s)))","e":true,"i":"","n":"mul","t":"mul[S <: ScalaType](s: S): Tensor[Promoted[D, ScalaToDType[S]]]","d":"torch.Tensor","k":"def"},
{"l":"https://storch.dev/api/torch/Tensor.html#mul[D2<:DType](t:Tensor[D2]):Tensor[Promoted[D,D2]]=Tensor.apply[Promoted[D,D2]](native.mul(t.native))","e":true,"i":"","n":"mul","t":"mul[D2 <: DType](t: Tensor[D2]): Tensor[Promoted[D, D2]]","d":"torch.Tensor","k":"def"},
{"l":"https://storch.dev/api/torch/Tensor.html#native:Tensor","e":true,"i":"","n":"native","t":"native: Tensor","d":"torch.Tensor","k":"val"},
{"l":"https://storch.dev/api/torch/Tensor.html#numel:Long=native.numel()","e":true,"i":"","n":"numel","t":"numel: Long","d":"torch.Tensor","k":"def"},
{"l":"https://storch.dev/api/torch/Tensor.html#permute(dims:Int*):Tensor[D]=Tensor.apply[D](native.permute(dims.map[Long](((_$1:Int)=>_$1.toLong)):_*))","e":true,"i":"","n":"permute","t":"permute(dims: Int*): Tensor[D]","d":"torch.Tensor","k":"def"},
{"l":"https://storch.dev/api/torch/Tensor.html#pow(exponent:Double):Tensor[D]=Tensor.apply[D](native.pow(newScalar(exponent)))","e":true,"i":"","n":"pow","t":"pow(exponent: Double): Tensor[D]","d":"torch.Tensor","k":"def"},
{"l":"https://storch.dev/api/torch/Tensor.html#prod[D<:DType](dtype:D):Tensor[Nothing]=Tensor.apply[Nothing](native.prod())","e":true,"i":"","n":"prod","t":"prod[D <: DType](dtype: D): Tensor[Nothing]","d":"torch.Tensor","k":"def"},
{"l":"https://storch.dev/api/torch/Tensor.html#requiresGrad:Boolean=native.requires_grad()","e":true,"i":"","n":"requiresGrad","t":"requiresGrad: Boolean","d":"torch.Tensor","k":"def"},
{"l":"https://storch.dev/api/torch/Tensor.html#requiresGrad_=(requiresGrad:Boolean):Unit={\nnative.requires_grad_(requiresGrad)\n()\n}","e":true,"i":"","n":"requiresGrad_=","t":"requiresGrad_=(requiresGrad: Boolean): Unit","d":"torch.Tensor","k":"def"},
{"l":"https://storch.dev/api/torch/Tensor.html#reshape(shape:Int*):Tensor[D]=Tensor.apply[D](native.reshape(shape.map[Long](((_$2:Int)=>_$2.toLong)):_*))","e":true,"i":"","n":"reshape","t":"reshape(shape: Int*): Tensor[D]","d":"torch.Tensor","k":"def"},
{"l":"https://storch.dev/api/torch/Tensor.html#shape:Seq[Int]=Tensor.this.size","e":true,"i":"","n":"shape","t":"shape: Seq[Int]","d":"torch.Tensor","k":"def"},
{"l":"https://storch.dev/api/torch/Tensor.html#size:Seq[Int]=ArraySeq.unsafeWrapArray[Int](longArrayOps(native.sizes().vec().get()).map[Int](((_$3:Long)=>_$3.toInt))(ClassTag.apply[Int](classOf[Int])))","e":true,"i":"","n":"size","t":"size: Seq[Int]","d":"torch.Tensor","k":"def"},
{"l":"https://storch.dev/api/torch/Tensor.html#square:Tensor[Nothing]=Tensor.apply[Nothing](native.square())","e":true,"i":"","n":"square","t":"square: Tensor[Nothing]","d":"torch.Tensor","k":"def"},
{"l":"https://storch.dev/api/torch/Tensor.html#squeeze:Tensor[D]=Tensor.apply[D](native.squeeze())","e":true,"i":"","n":"squeeze","t":"squeeze: Tensor[D]","d":"torch.Tensor","k":"def"},
{"l":"https://storch.dev/api/torch/Tensor.html#std:Tensor[D]=Tensor.apply[D](native.std())","e":true,"i":"","n":"std","t":"std: Tensor[D]","d":"torch.Tensor","k":"def"},
{"l":"https://storch.dev/api/torch/Tensor.html#sub[S<:ScalaType](s:S):Tensor[Promoted[D,ScalaToDType[S]]]=Tensor.apply[Promoted[D,ScalaToDType[S]]](native.sub(toScalar(s)))","e":true,"i":"","n":"sub","t":"sub[S <: ScalaType](s: S): Tensor[Promoted[D, ScalaToDType[S]]]","d":"torch.Tensor","k":"def"},
{"l":"https://storch.dev/api/torch/Tensor.html#sub[D2<:DType](t:Tensor[D2]):Tensor[Promoted[D,D2]]=Tensor.apply[Promoted[D,D2]](native.sub(t.native))","e":true,"i":"","n":"sub","t":"sub[D2 <: DType](t: Tensor[D2]): Tensor[Promoted[D, D2]]","d":"torch.Tensor","k":"def"},
{"l":"https://storch.dev/api/torch/Tensor.html#sum:Tensor[Sum[D]]=Tensor.apply[Sum[D]](native.sum())","e":true,"i":"","n":"sum","t":"sum: Tensor[Sum[D]]","d":"torch.Tensor","k":"def"},
{"l":"https://storch.dev/api/torch/Tensor.html#summarize(maxEntries:Int,flattened:Boolean,includeInfo:Boolean):String={\ndefformat(x:Any):String=xmatch{\ncasex:Float=>\naugmentString(\"%1.4f\").format(`x₂`)\ncasex:Double=>\naugmentString(\"%1.4f\").format(`x₃`)\ncasex=>\n`x₄`.toString()\n}\ndefsummarize(tensor:Tensor[D],`maxEntries₂`:Int):String=tensor.dimmatch{\ncase0=>\nformat(tensor.toSeq.head)\ncase1=>\nvalslice:Seq[String]=if(tensor.numel.<=(math.max(`maxEntries₂`,6)))tensor.toSeq.map[String](((`x₅`:Any)=>format(`x₅`)))else{\nvalleft:Seq[String]=tensor.apply[Boolean|Long](Slice.apply(int2long(0),int2long(`maxEntries₂`./(2)),Slice.apply$default$3))(ClassTag.apply[Boolean|Long](classOf[Object])).toSeq.map[String](((`x₆`:Any)=>format(`x₆`)))\nvalright:Seq[String]=tensor.apply[Boolean|Long](Slice.apply(int2long(`maxEntries₂`.unary_-./(2)),Slice.apply$default$2,Slice.apply$default$3))(ClassTag.apply[Boolean|Long](classOf[Object])).toSeq.map[String](((`x₇`:Any)=>format(`x₇`)))\nleft.++[String](Seq.apply[String](\"...\")).++[String](right)\n}\nslice.mkString(\"[\",\",\",\"]\")\ncase_=>\nvalinnerSummary:IndexedSeq[String]={\ndefsummarizeSlice(index:Int):String=summarize(tensor.apply[Boolean|Long](index)(ClassTag.apply[Boolean|Long](classOf[Object])),`maxEntries₂`)\nvalsliceLen:Int=tensor.size.apply(0).toInt\nif(sliceLen.<=(math.max(`maxEntries₂`,6)))intWrapper(0).until(sliceLen.toInt).map[String](((i:Int)=>summarizeSlice(i)))else{\nvalstart:IndexedSeq[String]=intWrapper(0).until(`maxEntries₂`./(2)).map[String](((`i₂`:Int)=>summarizeSlice(`i₂`)))\nvalend:IndexedSeq[String]=intWrapper(sliceLen.-(`maxEntries₂`./(2))).until(sliceLen).map[String](((`i₃`:Int)=>summarizeSlice(`i₃`)))\nstart.:+[String](\"...\").++[String](end)\n}\n}\nvalpadding:String=augmentString(\"\").*(this.dim.-(tensor.dim).+(1))\nvalextraLine:String=if(flattened.unary_!.&&(tensor.dim.>=(3)))\"\\n\"else\"\"\ninnerSummary.mkString(\"[\",(if(flattened.unary_!)\",\\n\"else\",\").+(extraLine).+(padding),\"]\")\n}\nif(Tensor.this.dtype.==(undefined))\"undefinedtensor\"elseif(includeInfo)_root_.scala.StringContext.apply(\"dtype=\",\",shape=\",\",device=\",\"\").s(Tensor.this.dtype.toString(),Tensor.this.size.mkString(\"[\",\",\",\"]\"),Tensor.this.device.device).+(if(flattened.unary_!)\"\\n\"else\":\").+(summarize(this,maxEntries))elsesummarize(this,maxEntries)\n}","e":true,"i":"","n":"summarize","t":"summarize(maxEntries: Int, flattened: Boolean, includeInfo: Boolean): String","d":"torch.Tensor","k":"def"},
{"l":"https://storch.dev/api/torch/Tensor.html#t:Tensor[D]=Tensor.apply[D](native.t())","e":true,"i":"","n":"t","t":"t: Tensor[D]","d":"torch.Tensor","k":"def"},
{"l":"https://storch.dev/api/torch/Tensor.html#take(indices:Tensor[Int64]):Tensor[D]=Tensor.apply[D](native.take(indices.native))","e":true,"i":"","n":"take","t":"take(indices: Tensor[Int64]): Tensor[D]","d":"torch.Tensor","k":"def"},
{"l":"https://storch.dev/api/torch/Tensor.html#takeAlongDim(indices:Tensor[Int64],dim:Int):Tensor=native.take_along_dim(indices.native,toOptional(int2long(dim)))","e":true,"i":"","n":"takeAlongDim","t":"takeAlongDim(indices: Tensor[Int64], dim: Int): Tensor","d":"torch.Tensor","k":"def"},
{"l":"https://storch.dev/api/torch/Tensor.html#to[U<:DType](device:Device,dtype:U,nonBlocking:Boolean,copy:Boolean):Tensor[U]={\nvaltargetDType:ScalarType=dtype.toScalarType\nif(dtype.==(this.dtype).&&(device.==(this.device)).&&(copy.unary_!))this.asInstanceOf[Tensor[U]]elseif(device.==(this.device))Tensor.apply[U](native.to(targetDType,nonBlocking,copy,newMemoryFormatOptional(torch.MemoryFormat.Preserve)))elseTensor.apply[U](native.to(device.toNative,targetDType,nonBlocking,copy,newMemoryFormatOptional(torch.MemoryFormat.Preserve)))\n}","e":true,"i":"","n":"to","t":"to[U <: DType](device: Device, dtype: U, nonBlocking: Boolean, copy: Boolean): Tensor[U]","d":"torch.Tensor","k":"def"},
{"l":"https://storch.dev/api/torch/Tensor.html#toArray:Array[DTypeToScala[D]]={\nvaltensor:Tensor[D]=Tensor.this.to[D](device=CPU,Tensor.this.to$default$2[D],Tensor.this.to$default$3[D],Tensor.this.to$default$4[D])\ndefwriteArray[A,B<:Buffer](getElem:Function1[B,A])(implicitevidence$4:ClassTag[A]):Array[A]={\nvala:Array[A]=Arrays.newGenericArray[A](Tensor.this.numel.toInt)(evidence$4)\nif(Tensor.this.numel.>(0)){\nvalbuf:B=tensor.native.contiguous().createBuffer[B]()\nvari:Int=0\nwhile(i.<(a.length)){\na.update(i,getElem.apply(buf))\ni=i.+(1)\n}\n}else()\n\n(a:Array[A])\n}\ndefwriteRawArray[A<:ScalaType](get:Function2[Array[A],TypedBuffer[A],TypedBuffer[A]])(implicitevidence$5:ClassTag[A]):Array[A]={\nval`a₂`:Array[A]=Arrays.newGenericArray[A](Tensor.this.numel.toInt)(evidence$5)\nif(Tensor.this.numel.>(0)){\nget.apply(`a₂`,tensor.native.contiguous().createBuffer[TypedBuffer[A]]())\n()\n}else()\n\n(`a₂`:Array[A])\n}\nimportScalarType.{_}\nvalout:Array[_>:Short&Int&Long&Complex[Double]&UByte&Byte&Boolean&Complex[Float]&Float&Double<:Short|Int|Long|Complex[Double]|UByte|Byte|Boolean|Complex[Float]|Float|Double]=tensor.native.dtype().toScalarType().intern()match{\ncaseByte=>\ngenericArrayOps[DTypeToScala[Int32]](Tensor.this.to[Int32](Tensor.this.to$default$1[Int32],dtype=int32,Tensor.this.to$default$3[Int32],Tensor.this.to$default$4[Int32]).toArray).map[UByte](((n:Int)=>UByte.apply(n)))(ClassTag.apply[UByte](classOf[UByte]))\ncaseChar=>\nwriteRawArray[Byte](((`a₃`:Array[Byte],b:ByteBuffer)=>b.get(`a₃`)))(ClassTag.apply[Byte](classOf[Byte]))\ncaseShort=>\nwriteRawArray[Short](((`a₄`:Array[Short],`b₂`:ShortBuffer)=>`b₂`.get(`a₄`)))(ClassTag.apply[Short](classOf[Short]))\ncaseInt=>\nwriteRawArray[Int](((`a₅`:Array[Int],`b₃`:IntBuffer)=>`b₃`.get(`a₅`)))(ClassTag.apply[Int](classOf[Int]))\ncaseLong=>\nwriteRawArray[Long](((`a₆`:Array[Long],`b₄`:LongBuffer)=>`b₄`.get(`a₆`)))(ClassTag.apply[Long](classOf[Long]))\ncaseFloat=>\nwriteRawArray[Float](((`a₇`:Array[Float],`b₅`:FloatBuffer)=>`b₅`.get(`a₇`)))(ClassTag.apply[Float](classOf[Float]))\ncaseDouble=>\nwriteRawArray[Double](((`a₈`:Array[Double],`b₆`:DoubleBuffer)=>`b₆`.get(`a₈`)))(ClassTag.apply[Double](classOf[Double]))\ncaseHalf=>\nTensor.this.to[Float32](Tensor.this.to$default$1[Float32],dtype=float32,Tensor.this.to$default$3[Float32],Tensor.this.to$default$4[Float32]).toArray\ncaseComplexHalf=>\nTensor.this.to[Complex64](Tensor.this.to$default$1[Complex64],dtype=complex64,Tensor.this.to$default$3[Complex64],Tensor.this.to$default$4[Complex64]).toArray\ncaseComplexFloat=>\nwriteArray[Complex[Float],FloatBuffer](((`b₇`:FloatBuffer)=>Complex.apply[Float](`b₇`.get(),`b₇`.get())))(ClassTag.apply[Complex[Float]](classOf[Complex]))\ncaseComplexDouble=>\nwriteArray[Complex[Double],DoubleBuffer](((`b₈`:DoubleBuffer)=>Complex.apply[Double](`b₈`.get(),`b₈`.get())))(ClassTag.apply[Complex[Double]](classOf[Complex]))\ncaseBool=>\nwriteArray[Boolean,ByteBuffer](((`b₉`:ByteBuffer)=>`b₉`.get().>(0)))(ClassTag.apply[Boolean](classOf[Boolean]))\ncaseQInt8=>\n???\ncaseQUInt8=>\n???\ncaseQInt32=>\n???\ncaseBFloat16=>\nTensor.this.to[Float32](Tensor.this.to$default$1[Float32],dtype=float32,Tensor.this.to$default$3[Float32],Tensor.this.to$default$4[Float32]).toArray\ncaseQUInt4x2=>\n???\ncaseQUInt2x4=>\n???\ncaseUndefined=>\n???\ncaseNumOptions=>\n???\n}\nout.asInstanceOf[Array[DTypeToScala[D]]]\n}","e":true,"i":"","n":"toArray","t":"toArray: Array[DTypeToScala[D]]","d":"torch.Tensor","k":"def"},
{"l":"https://storch.dev/api/torch/Tensor.html#toBuffer:TypedBuffer[DTypeToScala[D]]=Tensor.this.to[D](device=CPU,Tensor.this.to$default$2[D],Tensor.this.to$default$3[D],Tensor.this.to$default$4[D]).native.createBuffer[TypedBuffer[DTypeToScala[D]]]()","e":true,"i":"","n":"toBuffer","t":"toBuffer: TypedBuffer[DTypeToScala[D]]","d":"torch.Tensor","k":"def"},
{"l":"https://storch.dev/api/torch/Tensor.html#toSeq:Seq[DTypeToScala[D]]=ArraySeq.unsafeWrapArray[DTypeToScala[D]](Tensor.this.toArray)","e":true,"i":"","n":"toSeq","t":"toSeq: Seq[DTypeToScala[D]]","d":"torch.Tensor","k":"def"},
{"l":"https://storch.dev/api/torch/Tensor.html#unsqueeze(dim:Int):Tensor[D]=Tensor.apply[D](native.unsqueeze(int2long(dim)))","e":true,"i":"","n":"unsqueeze","t":"unsqueeze(dim: Int): Tensor[D]","d":"torch.Tensor","k":"def"},
{"l":"https://storch.dev/api/torch/Tensor.html#view(shape:Int*):Tensor[D]=Tensor.apply[D](native.view(shape.map[Long](((_$4:Int)=>_$4.toLong)):_*))","e":true,"i":"","n":"view","t":"view(shape: Int*): Tensor[D]","d":"torch.Tensor","k":"def"},
{"l":"https://storch.dev/api/torch/Tensor.html#zero():Unit={\nnative.zero_()\n()\n}","e":true,"i":"","n":"zero","t":"zero(): Unit","d":"torch.Tensor","k":"def"},
{"l":"https://storch.dev/api/torch/Tensor$.html","e":true,"i":"","n":"Tensor","t":"Tensor","d":"torch","k":"object"},
{"l":"https://storch.dev/api/torch/Tensor$.html#apply[D<:DType](native:pytorch.Tensor):Tensor[D]=(native.scalar_type().intern()match{\ncaseScalarType.Byte=>\nnewUInt8Tensor(native)\ncaseScalarType.Char=>\nnewInt8Tensor(native)\ncaseScalarType.Short=>\nnewInt16Tensor(native)\ncaseScalarType.Int=>\nnewInt32Tensor(native)\ncaseScalarType.Long=>\nnewInt64Tensor(native)\ncaseScalarType.Half=>\nnewFloat16Tensor(native)\ncaseScalarType.Float=>\nnewFloat32Tensor(native)\ncaseScalarType.Double=>\nnewFloat64Tensor(native)\ncaseScalarType.ComplexHalf=>\nnewComplex32Tensor(native)\ncaseScalarType.ComplexFloat=>\nnewComplex64Tensor(native)\ncaseScalarType.ComplexDouble=>\nnewComplex128Tensor(native)\ncaseScalarType.Bool=>\nnewBoolTensor(native)\ncaseScalarType.QInt8=>\nnewQInt8Tensor(native)\ncaseScalarType.QUInt8=>\nnewQUInt8Tensor(native)\ncaseScalarType.QInt32=>\nnewQInt32Tensor(native)\ncaseScalarType.BFloat16=>\nnewBFloat16Tensor(native)\ncaseScalarType.QUInt4x2=>\nnewQUInt4x2Tensor(native)\ncaseScalarType.QUInt2x4=>\nnewQUInt2x4Tensor(native)\ncaseScalarType.Undefined=>\nnewUndefinedTensor(native)\ncaseScalarType.NumOptions=>\nnewNumOptionsTensor(native)\n}).asInstanceOf[Tensor[D]]","e":true,"i":"","n":"apply","t":"apply[D <: DType](native: Tensor): Tensor[D]","d":"torch.Tensor","k":"def"},
{"l":"https://storch.dev/api/torch/Tensor$.html#apply[U<:ScalaType](data:|[Seq[U],U],layout:Layout,device:Device,requiresGrad:Boolean)(implicitevidence$1:ClassTag[U]):Tensor[ScalaToDType[U]]=datamatch{\ncasedata:Seq[_$7]=>\nval$1$:Tuple2[Pointer,DType]=(`data₂`.toArray[U](evidence$1)match{\ncasebools:Array[Boolean]=>\nTuple2.apply[BoolPointer,Bool]({\nvalp:BoolPointer=newBoolPointer(int2long(bools.length))\nrefArrayOps[Tuple2[Boolean,Int]](booleanArrayOps(bools).zipWithIndex).withFilter(((x$1:Tuple2[Boolean,Int])=>(x$1:@unchecked)match{\ncaseTuple2(b,i)=>\ntrue\ncase_=>\nfalse\n})).foreach[BoolPointer](((`x$1₂`:Tuple2[Boolean,Int])=>(`x$1₂`:Tuple2[Boolean,Int]@unchecked)match{\ncaseTuple2(b,i)=>\np.put(int2long(i),b)\n}))\n\n(p:BoolPointer)\n},bool)\ncasebytes:Array[Byte]=>\nTuple2.apply[BytePointer,Int8](newBytePointer(ByteBuffer.wrap(bytes)),int8)\ncaseshorts:Array[Short]=>\nTuple2.apply[ShortPointer,Int16](newShortPointer(ShortBuffer.wrap(shorts)),int16)\ncaseints:Array[Int]=>\nTuple2.apply[IntPointer,Int32](newIntPointer(IntBuffer.wrap(ints)),int32)\ncaselongs:Array[Long]=>\nTuple2.apply[LongPointer,Int64](newLongPointer(LongBuffer.wrap(longs)),int64)\ncasefloats:Array[Float]=>\nTuple2.apply[FloatPointer,Float32](newFloatPointer(FloatBuffer.wrap(floats)),float32)\ncasedoubles:Array[Double]=>\nTuple2.apply[DoublePointer,Float64](newDoublePointer(DoubleBuffer.wrap(doubles)),float64)\ncase_=>\nthrownewIllegalArgumentException(_root_.scala.StringContext.apply(\"Unsupportedsequencetype\").s())\n}:Tuple2[ShortPointer,Int16]|Tuple2[IntPointer,Int32]|Tuple2[LongPointer,Int64]|Tuple2[BoolPointer,Bool]|Tuple2[BytePointer,Int8]|Tuple2[FloatPointer,Float32]|Tuple2[DoublePointer,Float64]@unchecked)match{\ncaseTuple2(pointer,inputDType)=>\nTuple2.apply[Pointer,DType](pointer,inputDType)\n}\nval`pointer₂`:Pointer=$1$._1\nval`inputDType₂`:DType=$1$._2\nTensor.apply[ScalaToDType[U]](torch.from_blob(`pointer₂`,Array.apply(`data₂`.length.toLong),NativeConverters.tensorOptions(`inputDType₂`,layout,device,requiresGrad,NativeConverters.tensorOptions$default$5)))\ncaseevidence$1(data)=>\nvaldtype:DType=scalaToDType[U](`data₃`)\nTensor.apply[ScalaToDType[U]](torch.scalar_tensor(NativeConverters.toScalar(`data₃`),NativeConverters.tensorOptions(dtype,layout,device,requiresGrad,NativeConverters.tensorOptions$default$5)))\ncase_=>\nthrownewIllegalArgumentException(\"Unsupportedtype\")\n}","e":true,"i":"","n":"apply","t":"apply[U <: ScalaType : ClassTag](data: Seq[U] | U, layout: Layout, device: Device, requiresGrad: Boolean): Tensor[ScalaToDType[U]]","d":"torch.Tensor","k":"def"},
{"l":"https://storch.dev/api/torch/TensorTuple.html","e":true,"i":"","n":"TensorTuple","t":"TensorTuple[D <: DType](values: Tensor[D], indices: Tensor[Int64])","d":"torch","k":"class"},
{"l":"https://storch.dev/api/torch/UInt8.html","e":true,"i":"","n":"UInt8","t":"UInt8 extends DType","d":"torch","k":"class"},
{"l":"https://storch.dev/api/torch/UInt8Tensor.html","e":true,"i":"","n":"UInt8Tensor","t":"UInt8Tensor(native: Tensor) extends Tensor[UInt8]","d":"torch","k":"class"},
{"l":"https://storch.dev/api/torch/Undefined.html","e":true,"i":"","n":"Undefined","t":"Undefined extends DType","d":"torch","k":"class"},
{"l":"https://storch.dev/api/torch/UndefinedTensor.html","e":true,"i":"","n":"UndefinedTensor","t":"UndefinedTensor(native: Tensor) extends Tensor[Undefined]","d":"torch","k":"class"},
{"l":"https://storch.dev/api/torch/indexing$.html","e":true,"i":"","n":"indexing","t":"indexing","d":"torch","k":"object"},
{"l":"https://storch.dev/api/torch/indexing$.html#---:Ellipsis.type=Ellipsis","e":true,"i":"","n":"---","t":"---: Ellipsis.type","d":"torch.indexing","k":"val"},
{"l":"https://storch.dev/api/torch/indexing$$Ellipsis.html","e":true,"i":"","n":"Ellipsis","t":"Ellipsis","d":"torch.indexing","k":"class"},
{"l":"https://storch.dev/api/torch/indexing$$Ellipsis$.html","e":true,"i":"","n":"Ellipsis","t":"Ellipsis extends Ellipsis","d":"torch.indexing","k":"object"},
{"l":"https://storch.dev/api/torch/indexing$$Slice.html","e":true,"i":"","n":"Slice","t":"Slice(start: Option[Long], end: Option[Long], step: Option[Long])","d":"torch.indexing","k":"class"},
{"l":"https://storch.dev/api/torch/indexing$$Slice$.html","e":true,"i":"","n":"Slice","t":"Slice","d":"torch.indexing","k":"object"},
{"l":"https://storch.dev/api/torch/indexing$$Slice$.html#apply(start:|[Option[Long],Long],end:|[Option[Long],Long],step:|[Option[Long],Long]):Slice=Slice.apply(extract(start),extract(end),extract(step))","e":true,"i":"","n":"apply","t":"apply(start: Option[Long] | Long, end: Option[Long] | Long, step: Option[Long] | Long): Slice","d":"torch.indexing.Slice","k":"def"},
{"l":"torch/cuda.html#","e":false,"i":"","n":"torch.cuda","t":"torch.cuda","d":"","k":"package"},
{"l":"https://storch.dev/api/torch/cuda.html#isAvailable:Boolean=torch.cuda_is_available()","e":true,"i":"","n":"isAvailable","t":"isAvailable: Boolean","d":"torch.cuda","k":"def"},
{"l":"torch/data.html#","e":false,"i":"","n":"torch.data","t":"torch.data","d":"","k":"package"},
{"l":"https://storch.dev/api/torch/data/DataLoader.html","e":true,"i":"","n":"DataLoader","t":"DataLoader[Input, Batch](dataset: IndexedSeq[Input], batchSize: Int, shuffle: Boolean, collateFn: Seq[Input] => Batch) extends Iterable[Batch]","d":"torch.data","k":"class"},
{"l":"https://storch.dev/api/torch/data/Example.html","e":true,"i":"","n":"Example","t":"Example[D1 <: DType, D2 <: DType](feature: Tensor[D1], target: Tensor[D2])","d":"torch.data","k":"class"},
{"l":"https://storch.dev/api/torch/data/ExampleDataLoader.html","e":true,"i":"","n":"ExampleDataLoader","t":"ExampleDataLoader[D1 <: DType, D2 <: DType](dataset: IndexedSeq[Example[D1, D2]], batchSize: Int, shuffle: Boolean, collateFn: Seq[Example[D1, D2]] => (Tensor[D1], Tensor[D2])) extends DataLoader[Example[D1, D2], (Tensor[D1], Tensor[D2])]","d":"torch.data","k":"class"},
{"l":"https://storch.dev/api/torch/data/TensorDataset.html","e":true,"i":"","n":"TensorDataset","t":"TensorDataset[Input <: DType, Target <: DType] extends IndexedSeq[(Tensor[Input], Tensor[Target])]","d":"torch.data","k":"trait"},
{"l":"https://storch.dev/api/torch/data/TensorDataset.html#features:Tensor[Input]","e":true,"i":"","n":"features","t":"features: Tensor[Input]","d":"torch.data.TensorDataset","k":"def"},
{"l":"https://storch.dev/api/torch/data/TensorDataset.html#targets:Tensor[Target]","e":true,"i":"","n":"targets","t":"targets: Tensor[Target]","d":"torch.data.TensorDataset","k":"def"},
{"l":"https://storch.dev/api/torch/data/TensorDataset$.html","e":true,"i":"","n":"TensorDataset","t":"TensorDataset","d":"torch.data","k":"object"},
{"l":"https://storch.dev/api/torch/data/TensorDataset$.html#apply[Input<:DType,Target<:DType](_features:Tensor[Input],_targets:Tensor[Target]):TensorDataset[Input,Target]={\nfinalclass$anon()extends[Input>:Nothing<:DType,Target>:Nothing<:DType]=>TensorDataset[Input,Target][Input,Target]{\nvalfeatures:Tensor[Input]=_features\nvaltargets:Tensor[Target]=_targets\nrequire($anon.this.features.size.length.>(0))\nrequire($anon.this.features.size.head.==($anon.this.targets.size.head))\noverridedefapply(i:Int):Tuple2[Tensor[Input],Tensor[Target]]=Tuple2.apply[Tensor[Input],Tensor[Target]]($anon.this.features.apply[Boolean|Long](i)(ClassTag.apply[Boolean|Long](classOf[Object])),$anon.this.targets.apply[Boolean|Long](i)(ClassTag.apply[Boolean|Long](classOf[Object])))\noverridedeflength:Int=$anon.this.features.size.head\noverridedeftoString():String=_root_.scala.StringContext.apply(\"TensorDataset(features=\",\",targets=\",\")\").s($anon.this.features.info,$anon.this.targets.info)\n}\n\n(new$anon():TensorDataset[Input,Target])\n}","e":true,"i":"","n":"apply","t":"apply[Input <: DType, Target <: DType](_features: Tensor[Input], _targets: Tensor[Target]): TensorDataset[Input, Target]","d":"torch.data.TensorDataset","k":"def"},
{"l":"https://storch.dev/api/torch/data/TensorSeq.html","e":true,"i":"","n":"TensorSeq","t":"TensorSeq[D <: DType](t: Tensor[D]) extends IndexedSeq[Tensor[D]]","d":"torch.data","k":"class"},
{"l":"https://storch.dev/api/torch/data/TupleDataLoader.html","e":true,"i":"","n":"TupleDataLoader","t":"TupleDataLoader[D1 <: DType, D2 <: DType](dataset: IndexedSeq[(Tensor[D1], Tensor[D2])], batchSize: Int, shuffle: Boolean, collateFn: Seq[(Tensor[D1], Tensor[D2])] => (Tensor[D1], Tensor[D2])) extends DataLoader[(Tensor[D1], Tensor[D2]), (Tensor[D1], Tensor[D2])]","d":"torch.data","k":"class"},
{"l":"torch/nn.html#","e":false,"i":"","n":"torch.nn","t":"torch.nn","d":"","k":"package"},
{"l":"https://storch.dev/api/torch/nn/init$.html","e":true,"i":"","n":"init","t":"init","d":"torch.nn","k":"object"},
{"l":"https://storch.dev/api/torch/nn/init$.html#constant_(t:Tensor[_>:Nothing<:Any],fillValue:Double):Unit=({\ntorch.constant_(t.native,newScalar(fillValue))\n()\n}:Unit)","e":true,"i":"","n":"constant_","t":"constant_(t: Tensor[_], fillValue: Double): Unit","d":"torch.nn.init","k":"def"},
{"l":"https://storch.dev/api/torch/nn/init$.html#kaimingNormal_(t:Tensor[_>:Nothing<:Any],a:Double,mode:Mode,nonlinearity:NonLinearity):Unit={\ntorch.kaiming_normal_(t.native,a,mode.toNative,nonlinearity.toNative)\n()\n}","e":true,"i":"","n":"kaimingNormal_","t":"kaimingNormal_(t: Tensor[_], a: Double, mode: Mode, nonlinearity: NonLinearity): Unit","d":"torch.nn.init","k":"def"},
{"l":"https://storch.dev/api/torch/nn/init$$Mode.html","e":true,"i":"","n":"Mode","t":"Mode","d":"torch.nn.init","k":"enum"},
{"l":"https://storch.dev/api/torch/nn/init$$Mode$.html#FanIn:Mode=$new(0,\"FanIn\")","e":true,"i":"","n":"FanIn","t":"FanIn extends Mode","d":"torch.nn.init.Mode","k":"case"},
{"l":"https://storch.dev/api/torch/nn/init$$Mode$.html#FanOut:Mode=$new(1,\"FanOut\")","e":true,"i":"","n":"FanOut","t":"FanOut extends Mode","d":"torch.nn.init.Mode","k":"case"},
{"l":"https://storch.dev/api/torch/nn/init$$NonLinearity.html","e":true,"i":"","n":"NonLinearity","t":"NonLinearity","d":"torch.nn.init","k":"enum"},
{"l":"https://storch.dev/api/torch/nn/init$$NonLinearity$.html#Linear:NonLinearity=$new(0,\"Linear\")","e":true,"i":"","n":"Linear","t":"Linear extends NonLinearity","d":"torch.nn.init.NonLinearity","k":"case"},
{"l":"https://storch.dev/api/torch/nn/init$$NonLinearity$.html#Conv1D:NonLinearity=$new(1,\"Conv1D\")","e":true,"i":"","n":"Conv1D","t":"Conv1D extends NonLinearity","d":"torch.nn.init.NonLinearity","k":"case"},
{"l":"https://storch.dev/api/torch/nn/init$$NonLinearity$.html#Conv2D:NonLinearity=$new(2,\"Conv2D\")","e":true,"i":"","n":"Conv2D","t":"Conv2D extends NonLinearity","d":"torch.nn.init.NonLinearity","k":"case"},
{"l":"https://storch.dev/api/torch/nn/init$$NonLinearity$.html#Conv3D:NonLinearity=$new(3,\"Conv3D\")","e":true,"i":"","n":"Conv3D","t":"Conv3D extends NonLinearity","d":"torch.nn.init.NonLinearity","k":"case"},
{"l":"https://storch.dev/api/torch/nn/init$$NonLinearity$.html#ConvTranspose1D:NonLinearity=$new(4,\"ConvTranspose1D\")","e":true,"i":"","n":"ConvTranspose1D","t":"ConvTranspose1D extends NonLinearity","d":"torch.nn.init.NonLinearity","k":"case"},
{"l":"https://storch.dev/api/torch/nn/init$$NonLinearity$.html#ConvTranspose2D:NonLinearity=$new(5,\"ConvTranspose2D\")","e":true,"i":"","n":"ConvTranspose2D","t":"ConvTranspose2D extends NonLinearity","d":"torch.nn.init.NonLinearity","k":"case"},
{"l":"https://storch.dev/api/torch/nn/init$$NonLinearity$.html#ConvTranspose3D:NonLinearity=$new(6,\"ConvTranspose3D\")","e":true,"i":"","n":"ConvTranspose3D","t":"ConvTranspose3D extends NonLinearity","d":"torch.nn.init.NonLinearity","k":"case"},
{"l":"https://storch.dev/api/torch/nn/init$$NonLinearity$.html#Sigmoid:NonLinearity=$new(7,\"Sigmoid\")","e":true,"i":"","n":"Sigmoid","t":"Sigmoid extends NonLinearity","d":"torch.nn.init.NonLinearity","k":"case"},
{"l":"https://storch.dev/api/torch/nn/init$$NonLinearity$.html#ReLU:NonLinearity=$new(8,\"ReLU\")","e":true,"i":"","n":"ReLU","t":"ReLU extends NonLinearity","d":"torch.nn.init.NonLinearity","k":"case"},
{"l":"https://storch.dev/api/torch/nn/init$$NonLinearity$.html#LeakyReLU:NonLinearity=$new(9,\"LeakyReLU\")","e":true,"i":"","n":"LeakyReLU","t":"LeakyReLU extends NonLinearity","d":"torch.nn.init.NonLinearity","k":"case"},
{"l":"https://storch.dev/api/torch/nn/utils$.html","e":true,"i":"","n":"utils","t":"utils","d":"torch.nn","k":"object"},
{"l":"https://storch.dev/api/torch/nn/utils$.html#clipGradNorm_(parameters:Seq[Tensor[_>:Nothing<:Any]],max_norm:Double,norm_type:Double,error_if_nonfinite:Boolean):Double=torch.clip_grad_norm_(newTensorVector(parameters.map[Tensor](((_$1:Tensor[_>:Nothing<:Any])=>_$1.native)).toArray[Tensor](ClassTag.apply[Tensor](classOf[Tensor])):_*),max_norm,norm_type,error_if_nonfinite)","e":true,"i":"","n":"clipGradNorm_","t":"clipGradNorm_(parameters: Seq[Tensor[_]], max_norm: Double, norm_type: Double, error_if_nonfinite: Boolean): Double","d":"torch.nn.utils","k":"def"},
{"l":"torch/nn/functional.html#","e":false,"i":"","n":"torch.nn.functional","t":"torch.nn.functional","d":"","k":"package"},
{"l":"https://storch.dev/api/torch/nn/functional.html#bilinear[D<:DType](input1:Tensor[D],input2:Tensor[D],weight:Tensor[D],bias:|[Tensor[D],Option[Tensor[D]]]):Tensor[D]=Tensor.apply[D](torch.bilinear(input1.native,input2.native,weight.native,toOptional[D](bias)))","e":true,"i":"","n":"bilinear","t":"bilinear[D <: DType](input1: Tensor[D], input2: Tensor[D], weight: Tensor[D], bias: Tensor[D] | Option[Tensor[D]]): Tensor[D]","d":"torch.nn.functional","k":"def"},
{"l":"https://storch.dev/api/torch/nn/functional.html#binaryCrossEntropyWithLogits[I<:|[|[BFloat16,Float32],Float64],O<:|[|[|[BFloat16,Float16],Float32],Float64]](input:Tensor[I],target:Tensor[O]):Tensor[O]=Tensor.apply[O](torch.binary_cross_entropy_with_logits(input.native,target.native,newBCEWithLogitsLossOptions()))","e":true,"i":"","n":"binaryCrossEntropyWithLogits","t":"binaryCrossEntropyWithLogits[I <: BFloat16 | Float32 | Float64, O <: BFloat16 | Float16 | Float32 | Float64](input: Tensor[I], target: Tensor[O]): Tensor[O]","d":"torch.nn.functional","k":"def"},
{"l":"https://storch.dev/api/torch/nn/functional.html#conv1d[D<:|[FloatNN,ComplexNN]](input:Tensor[D],weight:Tensor[D],bias:|[Tensor[D],Option[Tensor[D]]],stride:Long,padding:Long,dilation:Long,groups:Long):Tensor[D]=Tensor.apply[D](torch.conv1d(input.native,weight.native,toOptional[D](bias),Array.apply(stride),Array.apply(padding),Array.apply(dilation),groups))","e":true,"i":"","n":"conv1d","t":"conv1d[D <: FloatNN | ComplexNN](input: Tensor[D], weight: Tensor[D], bias: Tensor[D] | Option[Tensor[D]], stride: Long, padding: Long, dilation: Long, groups: Long): Tensor[D]","d":"torch.nn.functional","k":"def"},
{"l":"https://storch.dev/api/torch/nn/functional.html#conv2d[D<:|[FloatNN,ComplexNN]](input:Tensor[D],weight:Tensor[D],bias:|[Tensor[D],Option[Tensor[D]]],stride:|[Long,Tuple2[Long,Long]],padding:|[Long,Tuple2[Long,Long]],dilation:|[Long,Tuple2[Long,Long]],groups:Long):Tensor[D]=Tensor.apply[D](torch.conv2d(input.native,weight.native,toOptional[D](bias),toArray(stride),toArray(padding),toArray(dilation),groups))","e":true,"i":"","n":"conv2d","t":"conv2d[D <: FloatNN | ComplexNN](input: Tensor[D], weight: Tensor[D], bias: Tensor[D] | Option[Tensor[D]], stride: Long | (Long, Long), padding: Long | (Long, Long), dilation: Long | (Long, Long), groups: Long): Tensor[D]","d":"torch.nn.functional","k":"def"},
{"l":"https://storch.dev/api/torch/nn/functional.html#dropout[D<:DType](input:Tensor[D],p:Double,training:Boolean):Tensor[D]=Tensor.apply[D](torch.dropout(input.native,p,training))","e":true,"i":"","n":"dropout","t":"dropout[D <: DType](input: Tensor[D], p: Double, training: Boolean): Tensor[D]","d":"torch.nn.functional","k":"def"},
{"l":"https://storch.dev/api/torch/nn/functional.html#linear[D<:DType](input:Tensor[D],weight:Tensor[D],bias:|[Tensor[D],Option[Tensor[D]]]):Tensor[D]=Tensor.apply[D](torch.linear(input.native,weight.native,toOptional[D](bias)))","e":true,"i":"","n":"linear","t":"linear[D <: DType](input: Tensor[D], weight: Tensor[D], bias: Tensor[D] | Option[Tensor[D]]): Tensor[D]","d":"torch.nn.functional","k":"def"},
{"l":"https://storch.dev/api/torch/nn/functional.html#logSoftmax[In<:DType,Out<:DType](input:Tensor[In],dim:Long)(dtype:Out):Tensor[Out]={\nvalnativeDType:ScalarTypeOptional=if(dtype.==(input.dtype))newScalarTypeOptional()elsenewScalarTypeOptional(dtype.toScalarType)\nTensor.apply[Out](torch.log_softmax(input.native,dim,nativeDType))\n}","e":true,"i":"","n":"logSoftmax","t":"logSoftmax[In <: DType, Out <: DType](input: Tensor[In], dim: Long)(dtype: Out): Tensor[Out]","d":"torch.nn.functional","k":"def"},
{"l":"https://storch.dev/api/torch/nn/functional.html#maxPool2d[D<:DType](input:Tensor[D],kernelSize:|[Long,Tuple2[Long,Long]]):Tensor[D]={\nvalkernelSizeNative:Array[Long]=kernelSizematch{\ncaseTuple2(h,w)=>\nArray.apply(h,w)\ncasex:Long=>\nArray.apply(x,x)\n}\nTensor.apply[D](torch.max_pool2d(input.native,kernelSizeNative:_*))\n}","e":true,"i":"","n":"maxPool2d","t":"maxPool2d[D <: DType](input: Tensor[D], kernelSize: Long | (Long, Long)): Tensor[D]","d":"torch.nn.functional","k":"def"},
{"l":"https://storch.dev/api/torch/nn/functional.html#relu[D<:DType](input:Tensor[D]):Tensor[D]=Tensor.apply[D](torch.relu(input.native))","e":true,"i":"","n":"relu","t":"relu[D <: DType](input: Tensor[D]): Tensor[D]","d":"torch.nn.functional","k":"def"},
{"l":"https://storch.dev/api/torch/nn/functional.html#sigmoid[D<:DType](input:Tensor[D]):Tensor[D]=Tensor.apply[D](torch.sigmoid(input.native))","e":true,"i":"","n":"sigmoid","t":"sigmoid[D <: DType](input: Tensor[D]): Tensor[D]","d":"torch.nn.functional","k":"def"},
{"l":"https://storch.dev/api/torch/nn/functional.html#softmax[In<:DType,Out<:DType](input:Tensor[In],dim:Long)(dtype:Out):Tensor[Out]={\nvalnativeDType:ScalarTypeOptional=if(dtype.==(input.dtype))newScalarTypeOptional()elsenewScalarTypeOptional(dtype.toScalarType)\nTensor.apply[Out](torch.softmax(input.native,dim,nativeDType))\n}","e":true,"i":"","n":"softmax","t":"softmax[In <: DType, Out <: DType](input: Tensor[In], dim: Long)(dtype: Out): Tensor[Out]","d":"torch.nn.functional","k":"def"},
{"l":"torch/nn/loss.html#","e":false,"i":"","n":"torch.nn.loss","t":"torch.nn.loss","d":"","k":"package"},
{"l":"https://storch.dev/api/torch/nn/loss/CrossEntropyLoss.html","e":true,"i":"","n":"CrossEntropyLoss","t":"CrossEntropyLoss extends Module","d":"torch.nn.loss","k":"class"},
{"l":"https://storch.dev/api/torch/nn/loss/CrossEntropyLoss.html#apply[D<:DType](input:Tensor[D],target:Tensor[_>:Nothing<:Any]):Tensor[D]=Tensor.apply[D](CrossEntropyLoss.this.nativeModule.forward(input.native,target.native))","e":true,"i":"","n":"apply","t":"apply[D <: DType](input: Tensor[D], target: Tensor[_]): Tensor[D]","d":"torch.nn.loss.CrossEntropyLoss","k":"def"},
{"l":"torch/nn/modules.html#","e":false,"i":"","n":"torch.nn.modules","t":"torch.nn.modules","d":"","k":"package"},
{"l":"https://storch.dev/api/torch/nn/modules/Default.html","e":true,"i":"","n":"Default","t":"Default[+D <: DType]","d":"torch.nn.modules","k":"trait"},
{"l":"https://storch.dev/api/torch/nn/modules/Default.html#dtype:D","e":true,"i":"","n":"dtype","t":"dtype: D","d":"torch.nn.modules.Default","k":"def"},
{"l":"https://storch.dev/api/torch/nn/modules/Default$.html","e":true,"i":"","n":"Default","t":"Default","d":"torch.nn.modules","k":"object"},
{"l":"https://storch.dev/api/torch/nn/modules/Default$.html#f32:Default[Float32]={\nfinalclass$anon()extendsDefault[Float32]{\ndefdtype:Float32=float32\n}\n\n(new$anon():Default[Float32])\n}","e":true,"i":"","n":"f32","t":"f32: Default[Float32]","d":"torch.nn.modules.Default","k":"given"},
{"l":"https://storch.dev/api/torch/nn/modules/HasParams.html","e":true,"i":"","n":"HasParams","t":"HasParams[ParamType <: FloatNN | ComplexNN] extends Module","d":"torch.nn.modules","k":"trait"},
{"l":"https://storch.dev/api/torch/nn/modules/HasParams.html#paramType:DType=deriveDType[ParamType]","e":true,"i":"","n":"paramType","t":"paramType: DType","d":"torch.nn.modules.HasParams","k":"def"},
{"l":"https://storch.dev/api/torch/nn/modules/HasWeight.html","e":true,"i":"","n":"HasWeight","t":"HasWeight[ParamType <: FloatNN | ComplexNN]","d":"torch.nn.modules","k":"trait"},
{"l":"https://storch.dev/api/torch/nn/modules/HasWeight.html#weight:Tensor[ParamType]","e":true,"i":"","n":"weight","t":"weight: Tensor[ParamType]","d":"torch.nn.modules.HasWeight","k":"def"},
{"l":"https://storch.dev/api/torch/nn/modules/Module.html","e":true,"i":"","n":"Module","t":"Module","d":"torch.nn.modules","k":"class"},
{"l":"https://storch.dev/api/torch/nn/modules/Module.html#copy():this.type={\nvalclone:Module=super.clone().asInstanceOf[Module]\nclone._nativeModule=Module.this._nativeModule.clone()\nclone.asInstanceOf[this.type]\n}","e":true,"i":"","n":"copy","t":"copy(): Module.this.type","d":"torch.nn.modules.Module","k":"def"},
{"l":"https://storch.dev/api/torch/nn/modules/Module.html#eval():Unit=Module.this.nativeModule.eval()","e":true,"i":"","n":"eval","t":"eval(): Unit","d":"torch.nn.modules.Module","k":"def"},
{"l":"https://storch.dev/api/torch/nn/modules/Module.html#isTraining:Boolean=Module.this.nativeModule.is_training()","e":true,"i":"","n":"isTraining","t":"isTraining: Boolean","d":"torch.nn.modules.Module","k":"def"},
{"l":"https://storch.dev/api/torch/nn/modules/Module.html#load(inputArchive:InputArchive):Unit=Module.this.nativeModule.load(inputArchive)","e":true,"i":"","n":"load","t":"load(inputArchive: InputArchive): Unit","d":"torch.nn.modules.Module","k":"def"},
{"l":"https://storch.dev/api/torch/nn/modules/Module.html#loadStateDict(stateDict:Map[String,Tensor[DType]]):Unit={\nvaltensorsToLoad:SeqMap[String,Tensor[_>:Nothing<:Any]]=Module.this.namedParameters(Module.this.namedParameters$default$1).++[Tensor[_>:Nothing<:Any]](Module.this.namedBuffers(Module.this.namedBuffers$default$1))\ntensorsToLoad.withFilter(((x$1:Tuple2[String,Tensor[_>:Nothing<:Any]])=>(x$1:@unchecked)match{\ncaseTuple2(key,param)=>\ntrue\ncase_=>\nfalse\n})).withFilter(((`x$1₂`:Tuple2[String,Tensor[_>:Nothing<:Any]])=>(`x$1₂`:Tuple2[String,Tensor[_>:Nothing<:Any]]@unchecked)match{\ncaseTuple2(key,param)=>\nstateDict.contains(key)\n})).foreach[Tensor[_>:Nothing<:Any]](((`x$1₃`:Tuple2[String,Tensor[_>:Nothing<:Any]])=>(`x$1₃`:@unchecked)match{\ncaseTuple2(key,param)=>\nnoGrad[Tensor[_>:Nothing<:Any]](param.copy_(stateDict.apply(`key₂`),param.copy_$default$2))\n}))\n}","e":true,"i":"","n":"loadStateDict","t":"loadStateDict(stateDict: Map[String, Tensor[DType]]): Unit","d":"torch.nn.modules.Module","k":"def"},
{"l":"https://storch.dev/api/torch/nn/modules/Module.html#modules(recurse:Boolean):Seq[Module]=Module.this.childModules.values.flatMap[Module](((child:Module)=>child.modules.+:[Module](child))).toSeq.distinct","e":true,"i":"","n":"modules","t":"modules(recurse: Boolean): Seq[Module]","d":"torch.nn.modules.Module","k":"def"},
{"l":"https://storch.dev/api/torch/nn/modules/Module.html#modules:Seq[Module]=Module.this.modules(recurse=true)","e":true,"i":"","n":"modules","t":"modules: Seq[Module]","d":"torch.nn.modules.Module","k":"def"},
{"l":"https://storch.dev/api/torch/nn/modules/Module.html#namedBuffers(recurse:Boolean):SeqMap[String,Tensor[_>:Nothing<:Any]]={\nvalbuffers:StringTensorDict=Module.this.nativeModule.named_buffers(recurse)\nTreeSeqMap.from[String,Tensor[DType]](intWrapper(0).until(buffers.size().toInt).map[Tuple2[String,Tensor[DType]]](((i:Int)=>{\nvalitem:StringTensorDictItem=buffers.get(int2long(i))\nTuple2.apply[String,Tensor[DType]](item.key().getString(),Tensor.apply[DType](item.access()))\n})))\n}","e":true,"i":"","n":"namedBuffers","t":"namedBuffers(recurse: Boolean): SeqMap[String, Tensor[_]]","d":"torch.nn.modules.Module","k":"def"},
{"l":"https://storch.dev/api/torch/nn/modules/Module.html#namedChildren:SeqMap[String,Module]=Module.this.childModules","e":true,"i":"","n":"namedChildren","t":"namedChildren: SeqMap[String, Module]","d":"torch.nn.modules.Module","k":"def"},
{"l":"https://storch.dev/api/torch/nn/modules/Module.html#namedModules:SeqMap[String,Module]=Module.this.namedChildren.flatMap[String,Module](((x$1:Tuple2[String,Module])=>{\nvalname:String=x$1._1\nvalmodule:Module=x$1._2\n\n(module.namedModules:SeqMap[String,Module])\n}))","e":true,"i":"","n":"namedModules","t":"namedModules: SeqMap[String, Module]","d":"torch.nn.modules.Module","k":"def"},
{"l":"https://storch.dev/api/torch/nn/modules/Module.html#namedParameters(recurse:Boolean):SeqMap[String,Tensor[_>:Nothing<:Any]]={\nvalparams:StringTensorDict=Module.this.nativeModule.named_parameters(recurse)\nTreeSeqMap.from[String,Tensor[DType]](intWrapper(0).until(params.size().toInt).map[Tuple2[String,Tensor[DType]]](((i:Int)=>{\nvalitem:StringTensorDictItem=params.get(int2long(i))\nTuple2.apply[String,Tensor[DType]](item.key().getString(),Tensor.apply[DType](item.access()))\n})))\n}","e":true,"i":"","n":"namedParameters","t":"namedParameters(recurse: Boolean): SeqMap[String, Tensor[_]]","d":"torch.nn.modules.Module","k":"def"},
{"l":"https://storch.dev/api/torch/nn/modules/Module.html#parameters:Seq[Tensor[_>:Nothing<:Any]]=Module.this.parameters(recurse=true)","e":true,"i":"","n":"parameters","t":"parameters: Seq[Tensor[_]]","d":"torch.nn.modules.Module","k":"def"},
{"l":"https://storch.dev/api/torch/nn/modules/Module.html#parameters(recurse:Boolean):Seq[Tensor[_>:Nothing<:Any]]=ArraySeq.unsafeWrapArray[Tensor](Module.this.nativeModule.parameters().get()).map[Tensor[DType]](((native:Tensor)=>Tensor.apply[DType](native)))","e":true,"i":"","n":"parameters","t":"parameters(recurse: Boolean): Seq[Tensor[_]]","d":"torch.nn.modules.Module","k":"def"},
{"l":"https://storch.dev/api/torch/nn/modules/Module.html#register[M<:Module](child:M)(name:sourcecode.Name):M={\nModule.this.childModules=Module.this.childModules.updated[Module](name.value,child)\nchild.registerWithParent[Module](this.nativeModule)(name)\nchild\n}","e":true,"i":"","n":"register","t":"register[M <: Module](child: M)(using name: Name): M","d":"torch.nn.modules.Module","k":"def"},
{"l":"https://storch.dev/api/torch/nn/modules/Module.html#register[D<:DType](t:Tensor[D],requiresGrad:Boolean)(name:sourcecode.Name):Tensor[D]={\nModule.this.nativeModule.register_parameter(name.value,t.native,requiresGrad)\nt\n}","e":true,"i":"","n":"register","t":"register[D <: DType](t: Tensor[D], requiresGrad: Boolean)(using name: Name): Tensor[D]","d":"torch.nn.modules.Module","k":"def"},
{"l":"https://storch.dev/api/torch/nn/modules/Module.html#save(outputArchive:OutputArchive):Unit=Module.this.nativeModule.save(outputArchive)","e":true,"i":"","n":"save","t":"save(outputArchive: OutputArchive): Unit","d":"torch.nn.modules.Module","k":"def"},
{"l":"https://storch.dev/api/torch/nn/modules/Module.html#summarize:String=Module.this.doSummarize(0)","e":true,"i":"","n":"summarize","t":"summarize: String","d":"torch.nn.modules.Module","k":"def"},
{"l":"https://storch.dev/api/torch/nn/modules/Module.html#to(device:Device):this.type={\nModule.this.nativeModule.asModule().to(device.toNative)\nthis\n}","e":true,"i":"","n":"to","t":"to(device: Device): Module.this.type","d":"torch.nn.modules.Module","k":"def"},
{"l":"https://storch.dev/api/torch/nn/modules/Module.html#to(dtype:DType,nonBlocking:Boolean):this.type={\nvalnativeCopy:Module=Module.this.nativeModule.clone()\nnativeCopy.asModule().to(dtype.toScalarType)\nthis\n}","e":true,"i":"","n":"to","t":"to(dtype: DType, nonBlocking: Boolean): Module.this.type","d":"torch.nn.modules.Module","k":"def"},
{"l":"https://storch.dev/api/torch/nn/modules/Module.html#train(on:Boolean):Unit=Module.this.nativeModule.train(on)","e":true,"i":"","n":"train","t":"train(on: Boolean): Unit","d":"torch.nn.modules.Module","k":"def"},
{"l":"https://storch.dev/api/torch/nn/modules/TensorModule.html","e":true,"i":"","n":"TensorModule","t":"TensorModule[D <: DType] extends Module with Tensor[D] => Tensor[D]","d":"torch.nn.modules","k":"trait"},
{"l":"torch/nn/modules/activation.html#","e":false,"i":"","n":"torch.nn.modules.activation","t":"torch.nn.modules.activation","d":"","k":"package"},
{"l":"https://storch.dev/api/torch/nn/modules/activation/ReLU.html","e":true,"i":"","n":"ReLU","t":"ReLU[D <: DType](inplace: Boolean)(implicit evidence$1: Default[D]) extends TensorModule[D]","d":"torch.nn.modules.activation","k":"class"},
{"l":"https://storch.dev/api/torch/nn/modules/activation/ReLU.html#apply(t:Tensor[D]):Tensor[D]=Tensor.apply[D](ReLU.this.nativeModule.forward(t.native))","e":true,"i":"","n":"apply","t":"apply(t: Tensor[D]): Tensor[D]","d":"torch.nn.modules.activation.ReLU","k":"def"},
{"l":"https://storch.dev/api/torch/nn/modules/activation/Softmax.html","e":true,"i":"","n":"Softmax","t":"Softmax(dim: Int) extends Module","d":"torch.nn.modules.activation","k":"class"},
{"l":"https://storch.dev/api/torch/nn/modules/activation/Softmax.html#apply[D<:DType](t:Tensor[D]):Tensor[D]=Tensor.apply[D](Softmax.this.nativeModule.forward(t.native))","e":true,"i":"","n":"apply","t":"apply[D <: DType](t: Tensor[D]): Tensor[D]","d":"torch.nn.modules.activation.Softmax","k":"def"},
{"l":"https://storch.dev/api/torch/nn/modules/activation/Softmax.html#nativeModule:SoftmaxImpl=newSoftmaxImpl(int2long(dim))","e":true,"i":"","n":"nativeModule","t":"nativeModule: SoftmaxImpl","d":"torch.nn.modules.activation.Softmax","k":"val"},
{"l":"torch/nn/modules/batchnorm.html#","e":false,"i":"","n":"torch.nn.modules.batchnorm","t":"torch.nn.modules.batchnorm","d":"","k":"package"},
{"l":"https://storch.dev/api/torch/nn/modules/batchnorm/BatchNorm2d.html","e":true,"i":"","n":"BatchNorm2d","t":"BatchNorm2d[ParamType <: FloatNN | ComplexNN](numFeatures: Int, eps: Double, momentum: Double, affine: Boolean, trackRunningStats: Boolean)(implicit evidence$1: Default[ParamType]) extends HasParams[ParamType] with HasWeight[ParamType] with TensorModule[ParamType]","d":"torch.nn.modules.batchnorm","k":"class"},
{"l":"https://storch.dev/api/torch/nn/modules/batchnorm/BatchNorm2d.html#apply(t:Tensor[ParamType]):Tensor[ParamType]=Tensor.apply[ParamType](BatchNorm2d.this.nativeModule.forward(t.native))","e":true,"i":"","n":"apply","t":"apply(t: Tensor[ParamType]): Tensor[ParamType]","d":"torch.nn.modules.batchnorm.BatchNorm2d","k":"def"},
{"l":"https://storch.dev/api/torch/nn/modules/batchnorm/BatchNorm2d.html#bias:Tensor[ParamType]=Tensor.apply[ParamType](BatchNorm2d.this.nativeModule.bias())","e":true,"i":"","n":"bias","t":"bias: Tensor[ParamType]","d":"torch.nn.modules.batchnorm.BatchNorm2d","k":"val"},
{"l":"https://storch.dev/api/torch/nn/modules/batchnorm/BatchNorm2d.html#weight:Tensor[ParamType]=Tensor.apply[ParamType](BatchNorm2d.this.nativeModule.weight())","e":true,"i":"","n":"weight","t":"weight: Tensor[ParamType]","d":"torch.nn.modules.batchnorm.BatchNorm2d","k":"val"},
{"l":"torch/nn/modules/container.html#","e":false,"i":"","n":"torch.nn.modules.container","t":"torch.nn.modules.container","d":"","k":"package"},
{"l":"https://storch.dev/api/torch/nn/modules/container/Sequential.html","e":true,"i":"","n":"Sequential","t":"Sequential[D <: DType](val modules: TensorModule[D]*) extends Module with TensorModule[D]","d":"torch.nn.modules.container","k":"class"},
{"l":"https://storch.dev/api/torch/nn/modules/container/Sequential.html#modules:Seq[TensorModule[D]]@Repeated","e":true,"i":"","n":"modules","t":"modules: TensorModule[D]*","d":"torch.nn.modules.container.Sequential","k":"val"},
{"l":"torch/nn/modules/conv.html#","e":false,"i":"","n":"torch.nn.modules.conv","t":"torch.nn.modules.conv","d":"","k":"package"},
{"l":"https://storch.dev/api/torch/nn/modules/conv/Conv2d.html","e":true,"i":"","n":"Conv2d","t":"Conv2d[ParamType <: FloatNN | ComplexNN](inChannels: Long, outChannels: Long, kernelSize: Int | (Int, Int), stride: Int | (Int, Int), padding: Int | (Int, Int), dilation: Int | (Int, Int), groups: Int, bias: Boolean, paddingMode: PaddingMode)(implicit evidence$1: Default[ParamType]) extends HasParams[ParamType] with TensorModule[ParamType]","d":"torch.nn.modules.conv","k":"class"},
{"l":"https://storch.dev/api/torch/nn/modules/conv/Conv2d.html#apply(t:Tensor[ParamType]):Tensor[ParamType]=Tensor.apply[ParamType](Conv2d.this.nativeModule.forward(t.native))","e":true,"i":"","n":"apply","t":"apply(t: Tensor[ParamType]): Tensor[ParamType]","d":"torch.nn.modules.conv.Conv2d","k":"def"},
{"l":"https://storch.dev/api/torch/nn/modules/conv/Conv2d.html#weight:Tensor[ParamType]=Tensor.apply[ParamType](Conv2d.this.nativeModule.weight())","e":true,"i":"","n":"weight","t":"weight: Tensor[ParamType]","d":"torch.nn.modules.conv.Conv2d","k":"val"},
{"l":"https://storch.dev/api/torch/nn/modules/conv/Conv2d$.html","e":true,"i":"","n":"Conv2d","t":"Conv2d","d":"torch.nn.modules.conv","k":"object"},
{"l":"https://storch.dev/api/torch/nn/modules/conv/Conv2d$$PaddingMode.html","e":true,"i":"","n":"PaddingMode","t":"PaddingMode","d":"torch.nn.modules.conv.Conv2d","k":"enum"},
{"l":"https://storch.dev/api/torch/nn/modules/conv/Conv2d$$PaddingMode$.html#Zeros:PaddingMode=$new(0,\"Zeros\")","e":true,"i":"","n":"Zeros","t":"Zeros extends PaddingMode","d":"torch.nn.modules.conv.Conv2d.PaddingMode","k":"case"},
{"l":"https://storch.dev/api/torch/nn/modules/conv/Conv2d$$PaddingMode$.html#Reflect:PaddingMode=$new(1,\"Reflect\")","e":true,"i":"","n":"Reflect","t":"Reflect extends PaddingMode","d":"torch.nn.modules.conv.Conv2d.PaddingMode","k":"case"},
{"l":"https://storch.dev/api/torch/nn/modules/conv/Conv2d$$PaddingMode$.html#Replicate:PaddingMode=$new(2,\"Replicate\")","e":true,"i":"","n":"Replicate","t":"Replicate extends PaddingMode","d":"torch.nn.modules.conv.Conv2d.PaddingMode","k":"case"},
{"l":"https://storch.dev/api/torch/nn/modules/conv/Conv2d$$PaddingMode$.html#Circular:PaddingMode=$new(3,\"Circular\")","e":true,"i":"","n":"Circular","t":"Circular extends PaddingMode","d":"torch.nn.modules.conv.Conv2d.PaddingMode","k":"case"},
{"l":"torch/nn/modules/flatten.html#","e":false,"i":"","n":"torch.nn.modules.flatten","t":"torch.nn.modules.flatten","d":"","k":"package"},
{"l":"https://storch.dev/api/torch/nn/modules/flatten/Flatten.html","e":true,"i":"","n":"Flatten","t":"Flatten[D <: DType](startDim: Int, endDim: Int)(implicit evidence$1: Default[D]) extends TensorModule[D]","d":"torch.nn.modules.flatten","k":"class"},
{"l":"https://storch.dev/api/torch/nn/modules/flatten/Flatten.html#apply(t:Tensor[D]):Tensor[D]=Tensor.apply[D](Flatten.this.nativeModule.forward(t.native))","e":true,"i":"","n":"apply","t":"apply(t: Tensor[D]): Tensor[D]","d":"torch.nn.modules.flatten.Flatten","k":"def"},
{"l":"https://storch.dev/api/torch/nn/modules/flatten/Flatten.html#nativeModule:FlattenImpl=newFlattenImpl(Flatten.this.options)","e":true,"i":"","n":"nativeModule","t":"nativeModule: FlattenImpl","d":"torch.nn.modules.flatten.Flatten","k":"val"},
{"l":"torch/nn/modules/linear.html#","e":false,"i":"","n":"torch.nn.modules.linear","t":"torch.nn.modules.linear","d":"","k":"package"},
{"l":"https://storch.dev/api/torch/nn/modules/linear/Identity.html","e":true,"i":"","n":"Identity","t":"Identity(args: Any*) extends Module","d":"torch.nn.modules.linear","k":"class"},
{"l":"https://storch.dev/api/torch/nn/modules/linear/Identity.html#apply[D<:DType](t:Tensor[D]):Tensor[D]=Tensor.apply[D](Identity.this.nativeModule.forward(t.native))","e":true,"i":"","n":"apply","t":"apply[D <: DType](t: Tensor[D]): Tensor[D]","d":"torch.nn.modules.linear.Identity","k":"def"},
{"l":"https://storch.dev/api/torch/nn/modules/linear/Identity.html#nativeModule:IdentityImpl=newIdentityImpl()","e":true,"i":"","n":"nativeModule","t":"nativeModule: IdentityImpl","d":"torch.nn.modules.linear.Identity","k":"val"},
{"l":"https://storch.dev/api/torch/nn/modules/linear/Linear.html","e":true,"i":"","n":"Linear","t":"Linear[ParamType <: FloatNN](inFeatures: Long, outFeatures: Long, bias: Boolean)(implicit evidence$1: Default[ParamType]) extends HasParams[ParamType] with TensorModule[ParamType]","d":"torch.nn.modules.linear","k":"class"},
{"l":"https://storch.dev/api/torch/nn/modules/linear/Linear.html#apply(input:Tensor[ParamType]):Tensor[ParamType]=Tensor.apply[ParamType](Linear.this.nativeModule.forward(input.native))","e":true,"i":"","n":"apply","t":"apply(input: Tensor[ParamType]): Tensor[ParamType]","d":"torch.nn.modules.linear.Linear","k":"def"},
{"l":"torch/nn/modules/normalization.html#","e":false,"i":"","n":"torch.nn.modules.normalization","t":"torch.nn.modules.normalization","d":"","k":"package"},
{"l":"https://storch.dev/api/torch/nn/modules/normalization/GroupNorm.html","e":true,"i":"","n":"GroupNorm","t":"GroupNorm[ParamType <: DType](numGroups: Int, numChannels: Int, eps: Double, affine: Boolean) extends TensorModule[ParamType]","d":"torch.nn.modules.normalization","k":"class"},
{"l":"https://storch.dev/api/torch/nn/modules/normalization/GroupNorm.html#apply(t:Tensor[ParamType]):Tensor[ParamType]=Tensor.apply[ParamType](GroupNorm.this.nativeModule.forward(t.native))","e":true,"i":"","n":"apply","t":"apply(t: Tensor[ParamType]): Tensor[ParamType]","d":"torch.nn.modules.normalization.GroupNorm","k":"def"},
{"l":"https://storch.dev/api/torch/nn/modules/normalization/GroupNorm.html#bias:Tensor[ParamType]=Tensor.apply[ParamType](GroupNorm.this.nativeModule.bias())","e":true,"i":"","n":"bias","t":"bias: Tensor[ParamType]","d":"torch.nn.modules.normalization.GroupNorm","k":"val"},
{"l":"https://storch.dev/api/torch/nn/modules/normalization/GroupNorm.html#weight:Tensor[ParamType]=Tensor.apply[ParamType](GroupNorm.this.nativeModule.weight())","e":true,"i":"","n":"weight","t":"weight: Tensor[ParamType]","d":"torch.nn.modules.normalization.GroupNorm","k":"val"},
{"l":"torch/nn/modules/pooling.html#","e":false,"i":"","n":"torch.nn.modules.pooling","t":"torch.nn.modules.pooling","d":"","k":"package"},
{"l":"https://storch.dev/api/torch/nn/modules/pooling/AdaptiveAvgPool2d.html","e":true,"i":"","n":"AdaptiveAvgPool2d","t":"AdaptiveAvgPool2d(outputSize: Int | Option[Int] | (Option[Int], Option[Int]) | (Int, Int)) extends Module","d":"torch.nn.modules.pooling","k":"class"},
{"l":"https://storch.dev/api/torch/nn/modules/pooling/AdaptiveAvgPool2d.html#apply[D<:|[|[BFloat16,Float32],Float64]](t:Tensor[D]):Tensor[D]=Tensor.apply[D](AdaptiveAvgPool2d.this.nativeModule.forward(t.native))","e":true,"i":"","n":"apply","t":"apply[D <: BFloat16 | Float32 | Float64](t: Tensor[D]): Tensor[D]","d":"torch.nn.modules.pooling.AdaptiveAvgPool2d","k":"def"},
{"l":"https://storch.dev/api/torch/nn/modules/pooling/MaxPool2d.html","e":true,"i":"","n":"MaxPool2d","t":"MaxPool2d[ParamType <: BFloat16 | Float32 | Float64](kernelSize: Int | (Int, Int), stride: Option[Int | (Int, Int)], padding: Int | (Int, Int), dilation: Int | (Int, Int), ceilMode: Boolean)(implicit evidence$1: Default[ParamType]) extends HasParams[ParamType] with TensorModule[ParamType]","d":"torch.nn.modules.pooling","k":"class"},
{"l":"https://storch.dev/api/torch/nn/modules/pooling/MaxPool2d.html#apply(t:Tensor[ParamType]):Tensor[ParamType]=Tensor.apply[ParamType](MaxPool2d.this.nativeModule.forward(t.native))","e":true,"i":"","n":"apply","t":"apply(t: Tensor[ParamType]): Tensor[ParamType]","d":"torch.nn.modules.pooling.MaxPool2d","k":"def"},
{"l":"torch/optim.html#","e":false,"i":"","n":"torch.optim","t":"torch.optim","d":"","k":"package"},
{"l":"https://storch.dev/api/torch/optim/Adam.html","e":true,"i":"","n":"Adam","t":"Adam(params: Iterable[Tensor[_]], lr: Double, betas: (Double, Double), eps: Double, weightDecay: Double, amsgrad: Boolean) extends Optimizer","d":"torch.optim","k":"class"},
{"l":"https://storch.dev/api/torch/optim/AdamW.html","e":true,"i":"","n":"AdamW","t":"AdamW(params: Iterable[Tensor[_]], lr: Double, betas: (Double, Double), eps: Double, weightDecay: Double, amsgrad: Boolean) extends Optimizer","d":"torch.optim","k":"class"},
{"l":"https://storch.dev/api/torch/optim/Optimizer.html","e":true,"i":"","n":"Optimizer","t":"Optimizer","d":"torch.optim","k":"class"},
{"l":"https://storch.dev/api/torch/optim/Optimizer.html#step():Unit={\nOptimizer.this.native.step()\n()\n}","e":true,"i":"","n":"step","t":"step(): Unit","d":"torch.optim.Optimizer","k":"def"},
{"l":"https://storch.dev/api/torch/optim/Optimizer.html#zeroGrad():Unit=Optimizer.this.native.zero_grad()","e":true,"i":"","n":"zeroGrad","t":"zeroGrad(): Unit","d":"torch.optim.Optimizer","k":"def"},
{"l":"https://storch.dev/api/torch/optim/SGD.html","e":true,"i":"","n":"SGD","t":"SGD(params: Iterable[Tensor[_]], lr: Float) extends Optimizer","d":"torch.optim","k":"class"},
{"l":"torch/optim/lr_scheduler.html#","e":false,"i":"","n":"torch.optim.lr_scheduler","t":"torch.optim.lr_scheduler","d":"","k":"package"},
{"l":"https://storch.dev/api/torch/optim/lr_scheduler/LRScheduler.html","e":true,"i":"","n":"LRScheduler","t":"LRScheduler","d":"torch.optim.lr_scheduler","k":"trait"},
{"l":"https://storch.dev/api/torch/optim/lr_scheduler/LRScheduler.html#step():Unit","e":true,"i":"","n":"step","t":"step(): Unit","d":"torch.optim.lr_scheduler.LRScheduler","k":"def"},
{"l":"https://storch.dev/api/torch/optim/lr_scheduler/StepLR.html","e":true,"i":"","n":"StepLR","t":"StepLR(optimizer: Optimizer, step_size: Int, gamma: Float) extends LRScheduler","d":"torch.optim.lr_scheduler","k":"class"},
{"l":"https://storch.dev/api/torch/optim/lr_scheduler/StepLR.html#step():Unit=StepLR.this.native.step()","e":true,"i":"","n":"step","t":"step(): Unit","d":"torch.optim.lr_scheduler.StepLR","k":"def"},
{"l":"torchvision/datasets.html#","e":false,"i":"","n":"torchvision.datasets","t":"torchvision.datasets","d":"","k":"package"},
{"l":"https://storch.dev/api/torchvision/datasets/MNIST.html","e":true,"i":"","n":"MNIST","t":"MNIST(root: Path, train: Boolean, download: Boolean) extends TensorDataset[Float32, Int64]","d":"torchvision.datasets","k":"class"},
{"l":"https://storch.dev/api/torchvision/datasets/MNIST.html#mirrors:List[String]=List.apply[String](\"http://yann.lecun.com/exdb/mnist/\",\"https://ossci-datasets.s3.amazonaws.com/mnist/\")","e":true,"i":"","n":"mirrors","t":"mirrors: List[String]","d":"torchvision.datasets.MNIST","k":"val"},
{"l":"https://storch.dev/api/torchvision/datasets/MNIST.html#resources:List[Tuple2[String,String]]=List.apply[Tuple2[String,String]](Tuple2.apply[String,String](\"train-images-idx3-ubyte.gz\",\"f68b3c2dcbeaaa9fbdd348bbdeb94873\"),Tuple2.apply[String,String](\"train-labels-idx1-ubyte.gz\",\"d53e105ee54ea40749a09fcbcd1e9432\"),Tuple2.apply[String,String](\"t10k-images-idx3-ubyte.gz\",\"9fb629c4189551a2d022fa330f9573f3\"),Tuple2.apply[String,String](\"t10k-labels-idx1-ubyte.gz\",\"ec29112dd5afa0611ce80d1b7f02629c\"))","e":true,"i":"","n":"resources","t":"resources: List[(String, String)]","d":"torchvision.datasets.MNIST","k":"val"},
{"l":"torchvision/models.html#","e":false,"i":"","n":"torchvision.models","t":"torchvision.models","d":"","k":"package"},
{"l":"https://storch.dev/api/torchvision/models/resnet$.html","e":true,"i":"","n":"resnet","t":"resnet","d":"torchvision.models","k":"object"},
{"l":"https://storch.dev/api/torchvision/models/resnet$.html#conv1x1[D<:FloatNN](inPlanes:Int,outPlanes:Int,stride:Int)(implicitevidence$2:Default[D]):Conv2d[D]={\nvalinChannels$2:Long=int2long(inPlanes)\nvaloutChannels$2:Long=int2long(outPlanes)\nvalpadding$1:Int|Tuple2[Int,Int]=Conv2d.$lessinit$greater$default$5[D]\nvaldilation$1:Int|Tuple2[Int,Int]=Conv2d.$lessinit$greater$default$6[D]\nvalgroups$1:Int=Conv2d.$lessinit$greater$default$7[D]\nvalpaddingMode$2:PaddingMode=Conv2d.$lessinit$greater$default$9[D]\nnewConv2d[D](inChannels$2,outChannels$2,kernelSize=1,stride=stride,padding$1,dilation$1,groups$1,bias=false,paddingMode$2)(evidence$2)\n}","e":true,"i":"","n":"conv1x1","t":"conv1x1[D <: FloatNN : Default](inPlanes: Int, outPlanes: Int, stride: Int): Conv2d[D]","d":"torchvision.models.resnet","k":"def"},
{"l":"https://storch.dev/api/torchvision/models/resnet$.html#conv3x3[D<:|[|[BFloat16,Float32],Float64]](inPlanes:Int,outPlanes:Int,stride:Int,groups:Int,dilation:Int)(implicitevidence$1:Default[D]):Conv2d[D]={\nvalinChannels$1:Long=int2long(inPlanes)\nvaloutChannels$1:Long=int2long(outPlanes)\nvalpaddingMode$1:PaddingMode=Conv2d.$lessinit$greater$default$9[D]\nnewConv2d[D](inChannels$1,outChannels$1,kernelSize=3,stride=stride,padding=dilation,dilation=dilation,groups=groups,bias=false,paddingMode$1)(evidence$1)\n}","e":true,"i":"","n":"conv3x3","t":"conv3x3[D <: BFloat16 | Float32 | Float64 : Default](inPlanes: Int, outPlanes: Int, stride: Int, groups: Int, dilation: Int): Conv2d[D]","d":"torchvision.models.resnet","k":"def"},
{"l":"https://storch.dev/api/torchvision/models/resnet$.html#resnet101[D<:|[|[BFloat16,Float32],Float64]](numClasses:Int)(implicitevidence$9:Default[D]):ResNet[Float32]=newResNet[Float32](Bottleneck,Seq.apply[Int](3,4,23,3),numClasses=numClasses,ResNet.$lessinit$greater$default$4[Float32],ResNet.$lessinit$greater$default$5[Float32],ResNet.$lessinit$greater$default$6[Float32],ResNet.$lessinit$greater$default$7[Float32],ResNet.$lessinit$greater$default$8[Float32])(f32)","e":true,"i":"","n":"resnet101","t":"resnet101[D <: BFloat16 | Float32 | Float64 : Default](numClasses: Int): ResNet[Float32]","d":"torchvision.models.resnet","k":"def"},
{"l":"https://storch.dev/api/torchvision/models/resnet$.html#resnet152[D<:|[|[BFloat16,Float32],Float64]](numClasses:Int)(implicitevidence$10:Default[D]):ResNet[Float32]=newResNet[Float32](Bottleneck,Seq.apply[Int](3,8,36,3),numClasses=numClasses,ResNet.$lessinit$greater$default$4[Float32],ResNet.$lessinit$greater$default$5[Float32],ResNet.$lessinit$greater$default$6[Float32],ResNet.$lessinit$greater$default$7[Float32],ResNet.$lessinit$greater$default$8[Float32])(f32)","e":true,"i":"","n":"resnet152","t":"resnet152[D <: BFloat16 | Float32 | Float64 : Default](numClasses: Int): ResNet[Float32]","d":"torchvision.models.resnet","k":"def"},
{"l":"https://storch.dev/api/torchvision/models/resnet$.html#resnet18[D<:|[|[BFloat16,Float32],Float64]](numClasses:Int)(implicitevidence$6:Default[D]):ResNet[Float32]=newResNet[Float32](BasicBlock,Seq.apply[Int](2,2,2,2),numClasses,ResNet.$lessinit$greater$default$4[Float32],ResNet.$lessinit$greater$default$5[Float32],ResNet.$lessinit$greater$default$6[Float32],ResNet.$lessinit$greater$default$7[Float32],ResNet.$lessinit$greater$default$8[Float32])(f32)","e":true,"i":"","n":"resnet18","t":"resnet18[D <: BFloat16 | Float32 | Float64 : Default](numClasses: Int): ResNet[Float32]","d":"torchvision.models.resnet","k":"def"},
{"l":"https://storch.dev/api/torchvision/models/resnet$.html#resnet34[D<:|[|[BFloat16,Float32],Float64]](numClasses:Int)(implicitevidence$7:Default[D]):ResNet[Float32]=newResNet[Float32](BasicBlock,Seq.apply[Int](3,4,6,3),numClasses=numClasses,ResNet.$lessinit$greater$default$4[Float32],ResNet.$lessinit$greater$default$5[Float32],ResNet.$lessinit$greater$default$6[Float32],ResNet.$lessinit$greater$default$7[Float32],ResNet.$lessinit$greater$default$8[Float32])(f32)","e":true,"i":"","n":"resnet34","t":"resnet34[D <: BFloat16 | Float32 | Float64 : Default](numClasses: Int): ResNet[Float32]","d":"torchvision.models.resnet","k":"def"},
{"l":"https://storch.dev/api/torchvision/models/resnet$.html#resnet50[D<:|[|[BFloat16,Float32],Float64]](numClasses:Int)(implicitevidence$8:Default[D]):ResNet[Float32]=newResNet[Float32](Bottleneck,Seq.apply[Int](3,4,6,3),numClasses=numClasses,ResNet.$lessinit$greater$default$4[Float32],ResNet.$lessinit$greater$default$5[Float32],ResNet.$lessinit$greater$default$6[Float32],ResNet.$lessinit$greater$default$7[Float32],ResNet.$lessinit$greater$default$8[Float32])(f32)","e":true,"i":"","n":"resnet50","t":"resnet50[D <: BFloat16 | Float32 | Float64 : Default](numClasses: Int): ResNet[Float32]","d":"torchvision.models.resnet","k":"def"},
{"l":"https://storch.dev/api/torchvision/models/resnet$$BasicBlock.html","e":true,"i":"","n":"BasicBlock","t":"BasicBlock[D <: BFloat16 | Float32 | Float64](inplanes: Int, planes: Int, stride: Int, downsample: Option[TensorModule[D]], groups: Int, baseWidth: Int, dilation: Int, normLayer: => Int => TensorModule[D])(implicit evidence$3: Default[D]) extends TensorModule[D]","d":"torchvision.models.resnet","k":"class"},
{"l":"https://storch.dev/api/torchvision/models/resnet$$BasicBlock.html#apply(x:Tensor[D]):Tensor[D]={\nvaridentity:Tensor[D]=x\nvarout:Tensor[D]=BasicBlock.this.conv1.apply(x)\nout=BasicBlock.this.bn1.apply(out)\nout=BasicBlock.this.relu.apply(out)\nout=BasicBlock.this.conv2.apply(out)\nout=BasicBlock.this.bn2.apply(out)\ndownsample.foreach[Unit](((downsample:TensorModule[D])=>identity=downsample.apply(x)))\nout.+=[D](identity)\nout=BasicBlock.this.relu.apply(out)\n\n(out:Tensor[D])\n}","e":true,"i":"","n":"apply","t":"apply(x: Tensor[D]): Tensor[D]","d":"torchvision.models.resnet.BasicBlock","k":"def"},
{"l":"https://storch.dev/api/torchvision/models/resnet$$BasicBlock.html#bn1:TensorModule[D]=BasicBlock.this.register[TensorModule[D]](normLayer.apply(planes))(generate)","e":true,"i":"","n":"bn1","t":"bn1: TensorModule[D]","d":"torchvision.models.resnet.BasicBlock","k":"val"},
{"l":"https://storch.dev/api/torchvision/models/resnet$$BasicBlock.html#bn2:TensorModule[D]=BasicBlock.this.register[TensorModule[D]](normLayer.apply(planes))(generate)","e":true,"i":"","n":"bn2","t":"bn2: TensorModule[D]","d":"torchvision.models.resnet.BasicBlock","k":"val"},
{"l":"https://storch.dev/api/torchvision/models/resnet$$BasicBlock.html#conv1:Conv2d[D]=BasicBlock.this.register[Conv2d[D]](conv3x3[D](inplanes,planes,stride,resnet.this.conv3x3$default$4[D],resnet.this.conv3x3$default$5[D])(evidence$3))(generate)","e":true,"i":"","n":"conv1","t":"conv1: Conv2d[D]","d":"torchvision.models.resnet.BasicBlock","k":"val"},
{"l":"https://storch.dev/api/torchvision/models/resnet$$BasicBlock.html#conv2:Conv2d[D]=BasicBlock.this.register[Conv2d[D]](conv3x3[D](planes,planes,resnet.this.conv3x3$default$3[D],resnet.this.conv3x3$default$4[D],resnet.this.conv3x3$default$5[D])(evidence$3))(generate)","e":true,"i":"","n":"conv2","t":"conv2: Conv2d[D]","d":"torchvision.models.resnet.BasicBlock","k":"val"},
{"l":"https://storch.dev/api/torchvision/models/resnet$$BasicBlock.html#relu:ReLU[D]=BasicBlock.this.register[ReLU[D]](newReLU[D](inplace=true)(evidence$3))(generate)","e":true,"i":"","n":"relu","t":"relu: ReLU[D]","d":"torchvision.models.resnet.BasicBlock","k":"val"},
{"l":"https://storch.dev/api/torchvision/models/resnet$$BasicBlock$.html","e":true,"i":"","n":"BasicBlock","t":"BasicBlock extends BlockBuilder","d":"torchvision.models.resnet","k":"object"},
{"l":"https://storch.dev/api/torchvision/models/resnet$$BasicBlock$.html#expansion:Int=1","e":true,"i":"","n":"expansion","t":"expansion: Int","d":"torchvision.models.resnet.BasicBlock","k":"val"},
{"l":"https://storch.dev/api/torchvision/models/resnet$$BlockBuilder.html","e":true,"i":"","n":"BlockBuilder","t":"BlockBuilder","d":"torchvision.models.resnet","k":"class"},
{"l":"https://storch.dev/api/torchvision/models/resnet$$BlockBuilder.html#apply[D<:|[|[BFloat16,Float32],Float64]](inplanes:Int,planes:Int,stride:Int,downsample:Option[TensorModule[D]],groups:Int,baseWidth:Int,dilation:Int,normLayer:Function1[Int,&[HasWeight[D],TensorModule[D]]])(implicitevidence$11:Default[D]):TensorModule[D]=thismatch{\ncaseBasicBlock=>\nnewBasicBlock[D](inplanes,planes,stride,downsample,groups,baseWidth,dilation,normLayer)(evidence$11)\ncaseBottleneck=>\nnewBottleneck[D](inplanes,planes,stride,downsample,groups,baseWidth,dilation,normLayer)(evidence$11)\n}","e":true,"i":"","n":"apply","t":"apply[D <: BFloat16 | Float32 | Float64 : Default](inplanes: Int, planes: Int, stride: Int, downsample: Option[TensorModule[D]], groups: Int, baseWidth: Int, dilation: Int, normLayer: Int => HasWeight[D] & TensorModule[D]): TensorModule[D]","d":"torchvision.models.resnet.BlockBuilder","k":"def"},
{"l":"https://storch.dev/api/torchvision/models/resnet$$BlockBuilder.html#expansion:Int","e":true,"i":"","n":"expansion","t":"expansion: Int","d":"torchvision.models.resnet.BlockBuilder","k":"val"},
{"l":"https://storch.dev/api/torchvision/models/resnet$$Bottleneck.html","e":true,"i":"","n":"Bottleneck","t":"Bottleneck[D <: BFloat16 | Float32 | Float64](inplanes: Int, planes: Int, stride: Int, downsample: Option[TensorModule[D]], groups: Int, baseWidth: Int, dilation: Int, normLayer: Int => HasWeight[D] & TensorModule[D])(implicit evidence$4: Default[D]) extends TensorModule[D]","d":"torchvision.models.resnet","k":"class"},
{"l":"https://storch.dev/api/torchvision/models/resnet$$Bottleneck.html#apply(x:Tensor[D]):Tensor[D]={\nvaridentity:Tensor[D]=x\nvarout:Tensor[D]=Bottleneck.this.conv1.apply(x)\nout=Bottleneck.this.bn1.apply(out)\nout=Bottleneck.this.relu.apply(out)\nout=Bottleneck.this.conv2.apply(out)\nout=Bottleneck.this.bn2.apply(out)\nout=Bottleneck.this.relu.apply(out)\nout=Bottleneck.this.conv3.apply(out)\nout=Bottleneck.this.bn3.apply(out)\ndownsample.foreach[Unit](((downsample:TensorModule[D])=>identity=downsample.apply(x)))\nout.+=[D](identity)\nout=Bottleneck.this.relu.apply(out)\n\n(out:Tensor[D])\n}","e":true,"i":"","n":"apply","t":"apply(x: Tensor[D]): Tensor[D]","d":"torchvision.models.resnet.Bottleneck","k":"def"},
{"l":"https://storch.dev/api/torchvision/models/resnet$$Bottleneck.html#bn1:HasWeight[D]&TensorModule[D]=Bottleneck.this.register[HasWeight[D]&TensorModule[D]](normLayer.apply(Bottleneck.this.width))(generate)","e":true,"i":"","n":"bn1","t":"bn1: HasWeight[D] & TensorModule[D]","d":"torchvision.models.resnet.Bottleneck","k":"val"},
{"l":"https://storch.dev/api/torchvision/models/resnet$$Bottleneck.html#bn2:HasWeight[D]&TensorModule[D]=Bottleneck.this.register[HasWeight[D]&TensorModule[D]](normLayer.apply(Bottleneck.this.width))(generate)","e":true,"i":"","n":"bn2","t":"bn2: HasWeight[D] & TensorModule[D]","d":"torchvision.models.resnet.Bottleneck","k":"val"},
{"l":"https://storch.dev/api/torchvision/models/resnet$$Bottleneck.html#bn3:HasWeight[D]&TensorModule[D]=Bottleneck.this.register[HasWeight[D]&TensorModule[D]](normLayer.apply(planes.*(expansion)))(generate)","e":true,"i":"","n":"bn3","t":"bn3: HasWeight[D] & TensorModule[D]","d":"torchvision.models.resnet.Bottleneck","k":"val"},
{"l":"https://storch.dev/api/torchvision/models/resnet$$Bottleneck.html#conv1:Conv2d[D]=Bottleneck.this.register[Conv2d[D]](conv1x1[D](inplanes,Bottleneck.this.width,resnet.this.conv1x1$default$3[D])(evidence$4))(generate)","e":true,"i":"","n":"conv1","t":"conv1: Conv2d[D]","d":"torchvision.models.resnet.Bottleneck","k":"val"},
{"l":"https://storch.dev/api/torchvision/models/resnet$$Bottleneck.html#conv2:Conv2d[D]=Bottleneck.this.register[Conv2d[D]](conv3x3[D](Bottleneck.this.width,Bottleneck.this.width,stride,groups,dilation)(evidence$4))(generate)","e":true,"i":"","n":"conv2","t":"conv2: Conv2d[D]","d":"torchvision.models.resnet.Bottleneck","k":"val"},
{"l":"https://storch.dev/api/torchvision/models/resnet$$Bottleneck.html#conv3:Conv2d[D]=Bottleneck.this.register[Conv2d[D]](conv1x1[D](Bottleneck.this.width,planes.*(expansion),resnet.this.conv1x1$default$3[D])(evidence$4))(generate)","e":true,"i":"","n":"conv3","t":"conv3: Conv2d[D]","d":"torchvision.models.resnet.Bottleneck","k":"val"},
{"l":"https://storch.dev/api/torchvision/models/resnet$$Bottleneck.html#relu:ReLU[D]=Bottleneck.this.register[ReLU[D]](newReLU[D](inplace=true)(evidence$4))(generate)","e":true,"i":"","n":"relu","t":"relu: ReLU[D]","d":"torchvision.models.resnet.Bottleneck","k":"val"},
{"l":"https://storch.dev/api/torchvision/models/resnet$$Bottleneck.html#width:Int=planes.*(baseWidth./(64.0)).toInt.*(groups)","e":true,"i":"","n":"width","t":"width: Int","d":"torchvision.models.resnet.Bottleneck","k":"val"},
{"l":"https://storch.dev/api/torchvision/models/resnet$$Bottleneck$.html","e":true,"i":"","n":"Bottleneck","t":"Bottleneck extends BlockBuilder","d":"torchvision.models.resnet","k":"object"},
{"l":"https://storch.dev/api/torchvision/models/resnet$$Bottleneck$.html#expansion:Int=4","e":true,"i":"","n":"expansion","t":"expansion: Int","d":"torchvision.models.resnet.Bottleneck","k":"val"},
{"l":"https://storch.dev/api/torchvision/models/resnet$$ResNet.html","e":true,"i":"","n":"ResNet","t":"ResNet[D <: BFloat16 | Float32 | Float64](block: BlockBuilder, layers: Seq[Int], numClasses: Int, zeroInitResidual: Boolean, groups: Int, widthPerGroup: Int, replaceStrideWithDilation: (Boolean, Boolean, Boolean), normLayer: Int => HasWeight[D] & TensorModule[D])(implicit evidence$5: Default[D]) extends Module","d":"torchvision.models.resnet","k":"class"},
{"l":"https://storch.dev/api/torchvision/models/resnet$$ResNet.html#apply(x:Tensor[D]):Tensor[D]=ResNet.this.forwardImpl(x)","e":true,"i":"","n":"apply","t":"apply(x: Tensor[D]): Tensor[D]","d":"torchvision.models.resnet.ResNet","k":"def"},
{"l":"https://storch.dev/api/torchvision/models/resnet$$ResNet.html#avgpool:AdaptiveAvgPool2d=ResNet.this.register[AdaptiveAvgPool2d](newAdaptiveAvgPool2d(Tuple2.apply[Int,Int](1,1)))(generate)","e":true,"i":"","n":"avgpool","t":"avgpool: AdaptiveAvgPool2d","d":"torchvision.models.resnet.ResNet","k":"val"},
{"l":"https://storch.dev/api/torchvision/models/resnet$$ResNet.html#baseWidth:Int=widthPerGroup","e":true,"i":"","n":"baseWidth","t":"baseWidth: Int","d":"torchvision.models.resnet.ResNet","k":"val"},
{"l":"https://storch.dev/api/torchvision/models/resnet$$ResNet.html#bn1:HasWeight[D]&TensorModule[D]=ResNet.this.register[HasWeight[D]&TensorModule[D]](normLayer.apply(ResNet.this.inplanes))(generate)","e":true,"i":"","n":"bn1","t":"bn1: HasWeight[D] & TensorModule[D]","d":"torchvision.models.resnet.ResNet","k":"val"},
{"l":"https://storch.dev/api/torchvision/models/resnet$$ResNet.html#conv1:Conv2d[D]=ResNet.this.register[Conv2d[D]]({\nvaloutChannels$3:Long=int2long(ResNet.this.inplanes)\nvaldilation$2:Int|Tuple2[Int,Int]=Conv2d.$lessinit$greater$default$6[D]\nvalgroups$2:Int=Conv2d.$lessinit$greater$default$7[D]\nvalpaddingMode$3:PaddingMode=Conv2d.$lessinit$greater$default$9[D]\nnewConv2d[D](3L,outChannels$3,kernelSize=7,stride=2,padding=3,dilation$2,groups$2,bias=false,paddingMode$3)(evidence$5)\n})(generate)","e":true,"i":"","n":"conv1","t":"conv1: Conv2d[D]","d":"torchvision.models.resnet.ResNet","k":"val"},
{"l":"https://storch.dev/api/torchvision/models/resnet$$ResNet.html#dilation:Int=1","e":true,"i":"","n":"dilation","t":"dilation: Int","d":"torchvision.models.resnet.ResNet","k":"var"},
{"l":"https://storch.dev/api/torchvision/models/resnet$$ResNet.html#fc:Linear[D]=ResNet.this.register[Linear[D]](newLinear[D](int2long(512.*(block.expansion)),int2long(numClasses),Linear.$lessinit$greater$default$3[D])(evidence$5))(generate)","e":true,"i":"","n":"fc","t":"fc: Linear[D]","d":"torchvision.models.resnet.ResNet","k":"val"},
{"l":"https://storch.dev/api/torchvision/models/resnet$$ResNet.html#inplanes:Int=64","e":true,"i":"","n":"inplanes","t":"inplanes: Int","d":"torchvision.models.resnet.ResNet","k":"var"},
{"l":"https://storch.dev/api/torchvision/models/resnet$$ResNet.html#layer1:Sequential[D]=ResNet.this.register[Sequential[D]](ResNet.this.makeLayer(block,64,layers.apply(0),ResNet.this.makeLayer$default$4,ResNet.this.makeLayer$default$5))(generate)","e":true,"i":"","n":"layer1","t":"layer1: Sequential[D]","d":"torchvision.models.resnet.ResNet","k":"val"},
{"l":"https://storch.dev/api/torchvision/models/resnet$$ResNet.html#layer2:Sequential[D]=ResNet.this.register[Sequential[D]](ResNet.this.makeLayer(block,128,layers.apply(1),stride=2,dilate=replaceStrideWithDilation.apply[Tuple3[Boolean,Boolean,Boolean]](0)))(generate)","e":true,"i":"","n":"layer2","t":"layer2: Sequential[D]","d":"torchvision.models.resnet.ResNet","k":"val"},
{"l":"https://storch.dev/api/torchvision/models/resnet$$ResNet.html#layer3:Sequential[D]=ResNet.this.register[Sequential[D]](ResNet.this.makeLayer(block,256,layers.apply(2),stride=2,dilate=replaceStrideWithDilation.apply[Tuple3[Boolean,Boolean,Boolean]](1)))(generate)","e":true,"i":"","n":"layer3","t":"layer3: Sequential[D]","d":"torchvision.models.resnet.ResNet","k":"val"},
{"l":"https://storch.dev/api/torchvision/models/resnet$$ResNet.html#layer4:Sequential[D]=ResNet.this.register[Sequential[D]](ResNet.this.makeLayer(block,512,layers.apply(3),stride=2,dilate=replaceStrideWithDilation.apply[Tuple3[Boolean,Boolean,Boolean]](2)))(generate)","e":true,"i":"","n":"layer4","t":"layer4: Sequential[D]","d":"torchvision.models.resnet.ResNet","k":"val"},
{"l":"https://storch.dev/api/torchvision/models/resnet$$ResNet.html#maxpool:MaxPool2d[D]=ResNet.this.register[MaxPool2d[D]](newMaxPool2d[D](kernelSize=3,stride=Some.apply[Int](2),padding=1,MaxPool2d.$lessinit$greater$default$4[D],MaxPool2d.$lessinit$greater$default$5[D])(evidence$5))(generate)","e":true,"i":"","n":"maxpool","t":"maxpool: MaxPool2d[D]","d":"torchvision.models.resnet.ResNet","k":"val"},
{"l":"https://storch.dev/api/torchvision/models/resnet$$ResNet.html#relu:ReLU[D]=ResNet.this.register[ReLU[D]](newReLU[D](inplace=true)(evidence$5))(generate)","e":true,"i":"","n":"relu","t":"relu: ReLU[D]","d":"torchvision.models.resnet.ResNet","k":"val"},
{"l":"torchvision/transforms.html#","e":false,"i":"","n":"torchvision.transforms","t":"torchvision.transforms","d":"","k":"package"},
{"l":"https://storch.dev/api/torchvision/transforms/functional$.html","e":true,"i":"","n":"functional","t":"functional","d":"torchvision.transforms","k":"object"},
{"l":"https://storch.dev/api/torchvision/transforms/functional$.html#normalize[D<:FloatNN](tensor:Tensor[D],mean:Seq[Float],std:Seq[Float]):Tensor[D]={\nassertImageTensor(tensor)\nif(tensor.dim.<(3))thrownewIllegalArgumentException(_root_.scala.StringContext.apply(\"Expectedtensortobeatensorimageofsize(...,C,H,W).Gottensor.size()=\",\"\").s(tensor.size))else()\nvaldtype:D=tensor.dtype\nvar_mean:Tensor[D]={\nval$1$:Tensor[Float32]={\nvaldevice$1:Device=tensor.device\nvallayout$1:Layout=Tensor.apply$default$2[Float]\nvalrequiresGrad$1:Boolean=Tensor.apply$default$4[Float]\nTensor.apply[Float](mean,layout$1,device=device$1,requiresGrad$1)(ClassTag.apply[Float](classOf[Float]))\n}\n$1$.to[D]($1$.to$default$1[D],dtype=dtype,$1$.to$default$3[D],$1$.to$default$4[D])\n}\nvar_std:Tensor[D]={\nval$2$:Tensor[Float32]={\nvaldevice$2:Device=tensor.device\nvallayout$2:Layout=Tensor.apply$default$2[Float]\nvalrequiresGrad$2:Boolean=Tensor.apply$default$4[Float]\nTensor.apply[Float](std,layout$2,device=device$2,requiresGrad$2)(ClassTag.apply[Float](classOf[Float]))\n}\n$2$.to[D]($2$.to$default$1[D],dtype=dtype,$2$.to$default$3[D],$2$.to$default$4[D])\n}\nif(_std.==(0).any.item)thrownewIllegalArgumentException(_root_.scala.StringContext.apply(\"stdevaluatedtozeroafterconversionto{dtype},leadingtodivisionbyzero.\").f[Any]())else()\nif(_std.dim.==(1))_mean=_mean.view(-1,1,1)else()\nif(_std.dim.==(1))_std=_std.view(-1,1,1)else()\ntensor.-[D](_mean)./[D](_std)\n}","e":true,"i":"","n":"normalize","t":"normalize[D <: FloatNN](tensor: Tensor[D], mean: Seq[Float], std: Seq[Float]): Tensor[D]","d":"torchvision.transforms.functional","k":"def"},
{"l":"https://storch.dev/api/torchvision/transforms/functional$.html#toImmutableImage[D<:FloatNN](pic:Tensor[D]):ImmutableImage={\nvar_pic:Tensor[D]=pic\nif(Seq.apply[Int](2,3).contains[Int](pic.dim).unary_!)thrownewIllegalArgumentException(_root_.scala.StringContext.apply(\"picshouldbe2/3dimensional.Got\",\"dimensions.\").s(pic.dim))elseif(pic.dim.==(2))_pic=pic.unsqueeze(0)else()\nif(pic.shape.apply(-3).>(4))thrownewIllegalArgumentException(_root_.scala.StringContext.apply(\"picshouldnothave>4channels.Got\",\"channels.\").s(pic.shape.apply(-3)))else()\nvalintImage:Tensor[Int8]={\nval$4$:Tensor[D]=_pic.permute(1,2,0).*[Int](255)\n$4$.to[Int8]($4$.to$default$1[Int8],dtype=int8,$4$.to$default$3[Int8],$4$.to$default$4[Int8])\n}\nvalbytes:Array[Byte]=intImage.toArray\nImmutableImage.loader().fromBytes(bytes)\n}","e":true,"i":"","n":"toImmutableImage","t":"toImmutableImage[D <: FloatNN](pic: Tensor[D]): ImmutableImage","d":"torchvision.transforms.functional","k":"def"},
{"l":"https://storch.dev/api/torchvision/transforms/functional$.html#toTensor(pic:ImmutableImage):Tensor[Float32]={\nvalbytes:Array[Int]=refArrayOps[Array[Int]](pic.rgb()).flatten[Int](((xs:Array[Int])=>wrapIntArray(xs)),ClassTag.apply[Int](classOf[Int]))\n\n{\nval$3$:Tensor[Int32]=Tensor.apply[Int](ArraySeq.unsafeWrapArray[Int](bytes),Tensor.apply$default$2[Int],Tensor.apply$default$3[Int],Tensor.apply$default$4[Int])(ClassTag.apply[Int](classOf[Int])).permute(2,0,1)\n$3$.to[Float32]($3$.to$default$1[Float32],dtype=float32,$3$.to$default$3[Float32],$3$.to$default$4[Float32])\n}./[Int](255)\n}","e":true,"i":"","n":"toTensor","t":"toTensor(pic: ImmutableImage): Tensor[Float32]","d":"torchvision.transforms.functional","k":"def"}];